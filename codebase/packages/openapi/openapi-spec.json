{
  "openapi": "3.0.1",
  "info": {
    "title": "PMA API",
    "description": "Documentation PMA API v1.0",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8083/v1",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearer-jwt-identity": []
    },
    {
      "additional-auth-jwt": []
    }
  ],
  "paths": {
    "/_working": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response in the case that the API Domain is in a healthy working state",
        "operationId": "getWorking",
        "responses": {
          "200": {
            "description": "Return a successful response in the case that the API Domain is in a healthy working state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/objectives/{uuid}": {
      "get": {
        "tags": ["objective"],
        "summary": "Get a personal objective by its uuid",
        "operationId": "getPersonalObjective",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the PersonalObjective",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePersonalObjective"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "put": {
        "tags": ["objective"],
        "summary": "Update existing personal objective",
        "description": "Update existing PersonalObjective",
        "operationId": "updatePersonalObjective",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalObjective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PersonalObjective updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePersonalObjective"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "delete": {
        "tags": ["objective"],
        "summary": "Delete existing personal objective",
        "description": "Delete existing PersonalObjective",
        "operationId": "deletePersonalObjective",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PersonalObjective deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/subsidiaries": {
      "get": {
        "tags": ["subsidiary"],
        "summary": "Get all Subsidiaries",
        "description": "Get all Subsidiaries",
        "operationId": "getSubsidiaries",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListSubsidiary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "post": {
        "tags": ["subsidiary"],
        "summary": "Create a Subsidiary",
        "description": "Subsidiary created",
        "operationId": "createSubsidiary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subsidiary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseSubsidiary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/users/iam-ids/{iamId}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by iam id (TPX)",
        "description": "Get user by iam id (TPX)",
        "operationId": "getUserByIamId",
        "parameters": [
          {
            "name": "iamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includes",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserIncludes"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUser"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/attributes": {
      "put": {
        "tags": ["profile"],
        "summary": "Update existing Profile",
        "description": "Update existing profile attributes",
        "operationId": "updateProfileAttributes",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TypedAttribute"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profile attributes updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListTypedAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "post": {
        "tags": ["profile"],
        "summary": "Create new profile attributes",
        "description": "Profile attributes created",
        "operationId": "createProfileAttributes",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TypedAttribute"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListTypedAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "delete": {
        "tags": ["profile"],
        "summary": "Delete existing profile attributes",
        "description": "Delete existing profile attributes",
        "operationId": "deleteProfileAttributes",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TypedAttribute"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profile attributes deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListTypedAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/_healthcheck": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return the status of API domain and all its components and dependencies",
        "operationId": "getOverallHealthCheck",
        "responses": {
          "200": {
            "description": "Return the status of API domain and all its components, dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverallHealth"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/processes": {
      "get": {
        "tags": ["deployment-endpoint"],
        "operationId": "processes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListString"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "post": {
        "tags": ["deployment-endpoint"],
        "operationId": "deployProcess",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseString"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/subsidiaries/{subsidiaryUuid}": {
      "get": {
        "tags": ["subsidiary"],
        "summary": "Get a Subsidiary by its uuid",
        "operationId": "getSubsidiary",
        "parameters": [
          {
            "name": "subsidiaryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Subsidiary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseSubsidiary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "put": {
        "tags": ["subsidiary"],
        "summary": "Update existing Subsidiary",
        "description": "Update existing Subsidiary",
        "operationId": "updateSubsidiary",
        "parameters": [
          {
            "name": "subsidiaryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subsidiary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Subsidiary updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseSubsidiary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "delete": {
        "tags": ["subsidiary"],
        "summary": "Delete existing Subsidiary",
        "description": "Delete existing Subsidiary",
        "operationId": "deleteSubsidiary",
        "parameters": [
          {
            "name": "subsidiaryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subsidiary deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/events": {
      "post": {
        "tags": ["spring-rest-event-listener"],
        "operationId": "handle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["user"],
        "summary": "Get users",
        "description": "Get users that have subsidiary permission",
        "operationId": "getUsersHasSubsidiaryPermission",
        "parameters": [
          {
            "name": "subsidiaryPermission.subsidiaryUuid",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "subsidiaryPermission.role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["SubsidiaryManager"]
            }
          },
          {
            "name": "includes",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserIncludes"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCollectionUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/_ready": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response if this instance is able to receive traffic",
        "operationId": "getReady",
        "responses": {
          "200": {
            "description": "Return a successful response if this node is able to receive traffic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/_status": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a summary of the health check results for API Domain",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Return a summary of the health check results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}": {
      "get": {
        "tags": ["profile"],
        "summary": "Get profile by colleague uuid",
        "description": "Get profile by colleague uuid",
        "operationId": "getProfileByColleagueUuid",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseColleagueProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "description": "Profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseColleagueProfile"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/objectives": {
      "post": {
        "tags": ["objective"],
        "summary": "Create a personal objective",
        "description": "PersonalObjective created",
        "operationId": "createPersonalObjective",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalObjective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePersonalObjective"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/business-units/{businessUnitUuid}/performance-cycles/{performanceCycleUuid}/objectives": {
      "get": {
        "tags": ["objective"],
        "summary": "Get all group's objectives by business unit and performance cycle",
        "operationId": "getGroupObjectives",
        "parameters": [
          {
            "name": "businessUnitUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "performanceCycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found Group Objectives",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListGroupObjective"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "put": {
        "tags": ["objective"],
        "summary": "Update group's objectives",
        "description": "Group's objectives updated",
        "operationId": "updateGroupObjectives",
        "parameters": [
          {
            "name": "businessUnitUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "performanceCycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupObjective"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group's objectives updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListGroupObjective"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "post": {
        "tags": ["objective"],
        "summary": "Create new group's objectives",
        "description": "Group's objectives created",
        "operationId": "createGroupObjectives",
        "parameters": [
          {
            "name": "businessUnitUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "performanceCycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupObjective"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListGroupObjective"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["user"],
        "summary": "Get me",
        "description": "Get user info for current authenticated user",
        "operationId": "getMe",
        "parameters": [
          {
            "name": "includes",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserIncludes"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUser"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/subsidiaries/{subsidiaryUuid}/permissions/colleagues/{colleagueUuid}/roles/{role}": {
      "post": {
        "tags": ["security"],
        "summary": "Grant permission",
        "description": "Grant subsidiary permission for user with particular role",
        "operationId": "grantSubsidiaryPermission",
        "parameters": [
          {
            "name": "subsidiaryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission granted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "description": "Subsidiary not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "409": {
            "description": "Permission already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      },
      "delete": {
        "tags": ["security"],
        "summary": "Revoke permission",
        "description": "Revoke subsidiary permission for user with particular role",
        "operationId": "revokeSubsidiaryPermission",
        "parameters": [
          {
            "name": "subsidiaryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "description": "Permission not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/live": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response in the case that the API Domain is in a healthy working state",
        "operationId": "getLive",
        "responses": {
          "200": {
            "description": "Return a successful response in the case that the API Domain is in a healthy working state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/subsidiaries/{subsidiaryUuid}/permissions": {
      "get": {
        "tags": ["security"],
        "summary": "Retrieve permissions for subsidiary",
        "description": "Retrieve permissions for subsidiary",
        "operationId": "getSubsidiaryPermissions",
        "parameters": [
          {
            "name": "subsidiaryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCollectionSubsidiaryPermission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/users/{colleagueUuid}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by colleague uuid",
        "description": "Get user by colleague uuid",
        "operationId": "getUserByColleagueUuid",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includes",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserIncludes"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUser"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/processes/{processName}": {
      "delete": {
        "tags": ["deployment-endpoint"],
        "operationId": "undeployProcess",
        "parameters": [
          {
            "name": "processName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseString"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    },
    "/hc": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response if this instance is able to receive traffic",
        "operationId": "getHc",
        "responses": {
          "200": {
            "description": "Return a successful response if this node is able to receive traffic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHORIZED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Health": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["SERVICE", "COMPONENT", "DEPENDENCY"]
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["Ok", "Fail", "Degraded"]
          },
          "version": {
            "type": "string"
          },
          "checked": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RestResponseVoid": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListSubsidiary": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subsidiary"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "Subsidiary": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UserIncludes": {
        "type": "string",
        "enum": ["SUBSIDIARY_PERMISSIONS"]
      },
      "RestResponseUser": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/User"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "SubsidiaryPermission": {
        "type": "object",
        "properties": {
          "colleagueUuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "subsidiaryUuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "role": {
            "type": "string",
            "readOnly": true,
            "enum": ["SubsidiaryManager"]
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "colleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "subsidiaryPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubsidiaryPermission"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TypedAttribute": {
        "type": "object",
        "properties": {
          "colleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["STRING", "DATE", "NUMBER", "BOOLEAN"]
          }
        }
      },
      "RestResponseListTypedAttribute": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypedAttribute"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "OverallHealth": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Fail", "Degraded"]
          },
          "version": {
            "type": "string"
          },
          "component": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Health"
            }
          }
        }
      },
      "RestResponseListString": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "eventName": {
            "type": "string"
          },
          "eventPriority": {
            "type": "string",
            "enum": [
              "HIGHEST",
              "HIGH_H",
              "HIGH",
              "HIGH_L",
              "NORMAL_H",
              "NORMAL",
              "NORMAL_L",
              "LOW_H",
              "LOW",
              "LOW_L",
              "LOWEST"
            ]
          },
          "eventCreationDate": {
            "type": "string",
            "format": "date-time"
          },
          "callbackEvent": {
            "$ref": "#/components/schemas/Event"
          },
          "callbackServiceURL": {
            "type": "string"
          },
          "eventProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "RestResponseCollectionUser": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "AddressList": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "countryCode": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "Colleague": {
        "type": "object",
        "properties": {
          "colleagueUUID": {
            "type": "string",
            "format": "uuid"
          },
          "employeeId": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "effectivity": {
            "$ref": "#/components/schemas/Effectivity"
          },
          "externalSystems": {
            "$ref": "#/components/schemas/ExternalSystems"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "serviceDates": {
            "$ref": "#/components/schemas/ServiceDates"
          },
          "workRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkRelationship"
            }
          }
        }
      },
      "ColleagueProfile": {
        "type": "object",
        "properties": {
          "colleague": {
            "$ref": "#/components/schemas/Colleague"
          },
          "profileAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypedAttribute"
            }
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "workPhoneNumber": {
            "type": "string"
          },
          "addresses": {
            "$ref": "#/components/schemas/AddressList"
          }
        }
      },
      "ContractType": {
        "type": "object",
        "properties": {
          "sourceCode": {
            "type": "string"
          },
          "sourceName": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Department": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "businessType": {
            "type": "string"
          }
        }
      },
      "Effectivity": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "ExternalSystems": {
        "type": "object",
        "properties": {
          "sourceSystem": {
            "type": "string"
          },
          "iam": {
            "$ref": "#/components/schemas/IamSourceSystem"
          }
        }
      },
      "Grade": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "IamSourceSystem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "costCategory": {
            "type": "string"
          }
        }
      },
      "LegalEmployer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Position": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "teamName": {
            "type": "string"
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "RestResponseColleagueProfile": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ColleagueProfile"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ServiceDates": {
        "type": "object",
        "properties": {
          "hireDate": {
            "type": "string",
            "format": "date"
          },
          "leavingDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "WorkRelationship": {
        "type": "object",
        "properties": {
          "locationUUID": {
            "type": "string",
            "format": "uuid"
          },
          "contractType": {
            "$ref": "#/components/schemas/ContractType"
          },
          "colleagueType": {
            "type": "string",
            "enum": ["EMPLOYEE", "EXTERNAL", "CONTRACTOR"]
          },
          "workingStatus": {
            "type": "string",
            "enum": ["ACTIVE", "INACTIVE", "SUSPENDED", "INACTIVE_PAID"]
          },
          "type": {
            "type": "string",
            "enum": ["PRIMARY"]
          },
          "defaultExpenseAccount": {
            "type": "string"
          },
          "peopleGroup": {
            "type": "string"
          },
          "legalEmployer": {
            "$ref": "#/components/schemas/LegalEmployer"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "grade": {
            "$ref": "#/components/schemas/Grade"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "job": {
            "$ref": "#/components/schemas/Job"
          },
          "managerUUID": {
            "type": "string",
            "format": "uuid"
          },
          "actionCode": {
            "type": "string"
          },
          "actionReasonCode": {
            "type": "string"
          },
          "userStatus": {
            "type": "string"
          },
          "workSchedule": {
            "type": "string"
          },
          "employmentType": {
            "type": "string"
          },
          "salaryFrequency": {
            "type": "string"
          },
          "workingHours": {
            "type": "string"
          },
          "costCenter": {
            "type": "string"
          },
          "assignmentId": {
            "type": "string"
          },
          "primaryEntity": {
            "type": "string"
          },
          "workingInHiredCountry": {
            "type": "boolean"
          },
          "isManager": {
            "type": "boolean"
          },
          "workLevel": {
            "type": "string",
            "enum": ["WL1", "WL2", "WL3", "WL4", "WL5"]
          }
        }
      },
      "PersonalObjective": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "colleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "performanceCycleUuid": {
            "type": "string",
            "format": "uuid"
          },
          "sequenceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "meets": {
            "type": "string"
          },
          "exceeds": {
            "type": "string"
          },
          "groupObjectiveUuid": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "SUBMITTED", "APPROVED", "REJECTED", "COMPLETED"]
          }
        }
      },
      "RestResponsePersonalObjective": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/PersonalObjective"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "GroupObjective": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "businessUnitUuid": {
            "type": "string",
            "format": "uuid"
          },
          "performanceCycleUuid": {
            "type": "string",
            "format": "uuid"
          },
          "sequenceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "SUBMITTED", "APPROVED", "REJECTED", "COMPLETED"]
          }
        }
      },
      "RestResponseListGroupObjective": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupObjective"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseCollectionSubsidiaryPermission": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubsidiaryPermission"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseString": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseSubsidiary": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Subsidiary"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      }
    },
    "responses": {
      "BAD_REQUEST": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponse"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "CONSTRAINT_VIOLATION",
                  "message": "Constraint violation",
                  "details": [
                    {
                      "message": "must not be blank",
                      "field": "param_name"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "UNAUTHORIZED": {
        "description": "Unauthorized",
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "description": "https://tools.ietf.org/html/rfc6750#section-3.1",
              "example": "Bearer error=\"invalid_token\", error_description=\"Provided token isn't active\", error_uri=\"https://tools.ietf.org/html/rfc6750#section-3.1\""
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponse"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "UNAUTHENTICATED",
                  "message": "Authentication failed",
                  "details": [
                    {
                      "message": "Detailed auth error message",
                      "target": "auth-provider-name"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "FORBIDDEN": {
        "description": "Forbidden",
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "description": "https://tools.ietf.org/html/rfc6750#section-3.1",
              "example": "Bearer error=\"insufficient_scope\", error_description=\"The request requires higher privileges than provided by the access token.\", error_uri=\"https://tools.ietf.org/html/rfc6750#section-3.1\""
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponse"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "ACCESS_DENIED",
                  "message": "Access is denied"
                }
              ]
            }
          }
        }
      },
      "INTERNAL_SERVER_ERROR": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponse"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "ER_CODE_UNEXPECTED_EXCEPTION",
                  "message": "Unexpected internal service error"
                }
              ]
            }
          }
        }
      },
      "NOT_FOUND": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponse"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "ENTITY_NOT_FOUND",
                  "message": "Entity was not found for parameter"
                }
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-jwt-identity": {
        "type": "http",
        "description": "supports old Identity V3 token as a fallback",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "additional-auth-jwt": {
        "type": "apiKey",
        "description": "additional auth. Used to authorize API by AD groups.",
        "name": "Authorization-App",
        "in": "header"
      }
    }
  }
}
