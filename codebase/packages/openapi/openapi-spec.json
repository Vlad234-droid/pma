{
  "openapi": "3.0.1",
  "info": {
    "title": "PMA API",
    "description": "Documentation PMA API v1.0",
    "version": "1.0"
  },
  "servers": [
    {
      "description": "DEV server",
      "url": "https://frontend.dev.pma.tescocloud.com/experience/yourcontribution/api/yc/v1"
    }
  ],
  "paths": {
    "/reviews/{reviewUuid}/notes": {
      "get": {
        "tags": ["review"],
        "summary": "Find Notes by Review",
        "operationId": "findNotesByReview",
        "parameters": [
          {
            "name": "reviewUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ownerUUID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReviewNote"
                }
              }
            }
          },
          "404": {
            "description": "Note not found"
          }
        }
      },
      "put": {
        "tags": ["review"],
        "summary": "Update a note for review",
        "operationId": "updateReviewNote",
        "parameters": [
          {
            "name": "reviewUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Note found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReviewNote"
                }
              }
            }
          },
          "404": {
            "description": "Note not found"
          }
        }
      },
      "post": {
        "tags": ["review"],
        "summary": "Create a note for review",
        "operationId": "createReviewNote",
        "parameters": [
          {
            "name": "reviewUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Note created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReviewNote"
                }
              }
            }
          }
        }
      }
    },
    "/recovery/colleagues": {
      "put": {
        "tags": ["recovery"],
        "summary": "Update existing colleagues",
        "description": "Update existing colleagues",
        "operationId": "updateExistingColleague",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Colleagues updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMapUUIDBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{uuid}": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get performance cycle by UUID",
        "operationId": "get",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeForms",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found performance cycle by UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCompositePMCycleResponse"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycle not found"
          }
        }
      },
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Updates an existing performance cycle",
        "description": "Performance cycle edited",
        "operationId": "update",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PMCycle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Performance cycle updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMCycle"
                }
              }
            }
          },
          "400": {
            "description": "Invalid UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMCycle"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{uuid}/start-scheduled": {
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Start performance cycle",
        "description": "Performance cycle started",
        "operationId": "startScheduled",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance cycle started",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{uuid}/forms": {
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Update form",
        "description": "Update performance cycle form",
        "operationId": "updateForm",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PMCycleUpdateFormRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Performance cycle form updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMCycle"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{uuid}/forms/latest": {
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Update form to the latest version",
        "description": "Update form to the latest version",
        "operationId": "updateFormLatestVersion",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "form-key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Form updated to the latest version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMCycle"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{cycleUuid}/files/{fileUuid}/deploy": {
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Deploy file resource by uuid for existing performance cycle",
        "description": "File deployed",
        "operationId": "deployTemplateByUuidForCycle",
        "parameters": [
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "merge-mode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["ADDED", "OVERWRITE"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deployed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{cycleUuid}/files/deploy": {
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Deploy file resource by path and name for existing performance cycle",
        "description": "File deployed",
        "operationId": "deployTemplateByPathAndNameForCycle",
        "parameters": [
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file-name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merge-mode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["ADDED", "OVERWRITE"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deployed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{cycleUuid}/colleagues/{colleagueUuid}/start": {
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Start performance cycle for colleague",
        "description": "Performance cycle started",
        "operationId": "startColleagueCycle",
        "parameters": [
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "enum": ["CREATE", "UPDATE", "DELETE", "MERGE"]
                }
              },
              "examples": {
                "ALL_MERGE": {
                  "description": "ALL_MERGE",
                  "value": {
                    "COLLEAGUE_CYCLE_RECALCULATION_MODE": "MERGE",
                    "TIMELINE_POINT_RECALCULATION_MODE": "MERGE"
                  }
                },
                "ALL_CREATE": {
                  "description": "ALL_CREATE",
                  "value": {
                    "COLLEAGUE_CYCLE_RECALCULATION_MODE": "CREATE",
                    "TIMELINE_POINT_RECALCULATION_MODE": "CREATE"
                  }
                },
                "ALL_UPDATE": {
                  "description": "ALL_UPDATE",
                  "value": {
                    "COLLEAGUE_CYCLE_RECALCULATION_MODE": "UPDATE",
                    "TIMELINE_POINT_RECALCULATION_MODE": "UPDATE"
                  }
                },
                "CYCLE_UPDATE_TLP_MERGE": {
                  "description": "CYCLE_UPDATE_TLP_MERGE",
                  "value": {
                    "COLLEAGUE_CYCLE_RECALCULATION_MODE": "UPDATE",
                    "TIMELINE_POINT_RECALCULATION_MODE": "MERGE"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Performance cycle started",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/pdp/goals": {
      "get": {
        "tags": ["pdp"],
        "summary": "Get a list of PDP Goals by its colleague",
        "operationId": "getGoals",
        "responses": {
          "200": {
            "description": "Found the PDP Goals",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePDPResponse"
                }
              }
            }
          },
          "404": {
            "description": "PDP Goals not found"
          }
        }
      },
      "put": {
        "tags": ["pdp"],
        "summary": "Update a PDP",
        "description": "PDP updated",
        "operationId": "update_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PDPGoal"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PDP updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListPDPGoal"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["pdp"],
        "summary": "Create a PDP",
        "description": "PDP created",
        "operationId": "create_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PDPGoal"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListPDPGoal"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{code}": {
      "get": {
        "tags": ["organisation-dictionary"],
        "summary": "Get organisation dictionary by code",
        "operationId": "findOrganisationDictionary",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the organisation dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseOrganisationDictionary"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["organisation-dictionary"],
        "summary": "Update organisation dictionary",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationDictionary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Updated organisation dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseOrganisationDictionary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["organisation-dictionary"],
        "summary": "Delete organisation dictionary",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted organisation dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/org-objectives/publish": {
      "put": {
        "tags": ["org-objective"],
        "summary": "Publish organisation objectives",
        "operationId": "publishOrgObjectives",
        "responses": {
          "200": {
            "description": "Organisation objectives have been published",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOrgObjective"
                }
              }
            }
          },
          "404": {
            "description": "Organisation objectives not found"
          }
        }
      },
      "post": {
        "tags": ["org-objective"],
        "summary": "Create and publish organisation objectives",
        "operationId": "createAndPublishOrgObjectives",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrgObjective"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organisation objectives have been published",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOrgObjective"
                }
              }
            }
          },
          "404": {
            "description": "Organisation objectives not found"
          }
        }
      }
    },
    "/notes/{id}": {
      "put": {
        "tags": ["notes"],
        "summary": "Update a Note",
        "operationId": "update_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Update a Note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseNote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["notes"],
        "summary": "Delete a Note",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Delete a Note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/notes/folders/{id}": {
      "put": {
        "tags": ["notes"],
        "summary": "Update a Folder",
        "operationId": "update_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Update a Folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseFolder"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["notes"],
        "summary": "Delete a Folder",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Delete a Folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/feedbacks/{uuid}": {
      "get": {
        "tags": ["feedback"],
        "summary": "Get feedback by UUID with all items",
        "operationId": "getFeedback",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseFeedback"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["feedback"],
        "summary": "Updates an existing feedback",
        "operationId": "updateFeedback",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Feedback updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseFeedback"
                }
              }
            }
          },
          "400": {
            "description": "Invalid UUID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseFeedback"
                }
              }
            }
          }
        }
      }
    },
    "/feedbacks/{uuid}/read": {
      "put": {
        "tags": ["feedback"],
        "summary": "Mark an existing feedback as read",
        "operationId": "markAsRead",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Mark as read successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/config/default/attributes/colleagues/{colleagueUuid}": {
      "put": {
        "tags": ["config"],
        "summary": "Update default attributes for a colleague",
        "operationId": "updateDefaultAttributes",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update default attributes for a colleague",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/config-entries/{entryUuid}": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get published config entry structure by root identifier",
        "operationId": "getPublishedEntryConfigStructure",
        "parameters": [
          {
            "name": "entryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseConfigEntryResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["config-entry"],
        "summary": "Update config entry",
        "operationId": "update_5",
        "parameters": [
          {
            "name": "entryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Updated config entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["config-entry"],
        "summary": "Delete config entry",
        "operationId": "delete_7",
        "parameters": [
          {
            "name": "entryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete config entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-codes/{code}/statuses/{status}/reviews": {
      "put": {
        "tags": ["review"],
        "summary": "Update status of existing reviews",
        "description": "Update status of existing reviews",
        "operationId": "updateReviewsStatus",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "WAITING_FOR_APPROVAL",
                "APPROVED",
                "DECLINED",
                "WAITING_FOR_COMPLETION",
                "REQUESTED_TO_AMEND",
                "COMPLETED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewsStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reviews status updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMReviewStatus"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-codes/{code}/reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of reviews by its cycleUuid, colleagueUuid, review type",
        "operationId": "getReviews",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReview"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found"
          }
        }
      },
      "put": {
        "tags": ["review"],
        "summary": "Update list of reviews",
        "description": "Update list of reviews",
        "operationId": "updateReviews",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modes",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["CREATE", "UPDATE", "DELETE", "MERGE"]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["reviews"],
                "type": "object",
                "properties": {
                  "reviews": {
                    "type": "string",
                    "format": "binary"
                  },
                  "uploadMetadata": {
                    "type": "string",
                    "format": "binary"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reviews updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReview"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-codes/{code}/numbers/{number}/reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get a review by its cycleUuid, colleagueUuid, review type and number",
        "operationId": "getReview",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReview"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "put": {
        "tags": ["review"],
        "summary": "Update existing review",
        "description": "Update existing review",
        "operationId": "updateReview",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Review"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Review updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReview"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "post": {
        "tags": ["review"],
        "summary": "Create a review",
        "description": "Review created",
        "operationId": "createReview",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["review"],
                "type": "object",
                "properties": {
                  "review": {
                    "type": "string",
                    "format": "binary"
                  },
                  "uploadMetadata": {
                    "type": "string",
                    "format": "binary"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReview"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["review"],
        "summary": "Delete existing review",
        "description": "Delete existing review",
        "operationId": "deleteReview",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/attributes": {
      "put": {
        "tags": ["profile"],
        "summary": "Update existing profile attributes",
        "description": "Update existing profile attributes",
        "operationId": "updateProfileAttributes",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnersTypedAttributeUUID"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profile attributes updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOwnersTypedAttributeUUID"
                }
              }
            }
          },
          "404": {
            "description": "Profile not found"
          }
        }
      },
      "post": {
        "tags": ["profile"],
        "summary": "Create new profile attributes",
        "description": "Profile attributes created",
        "operationId": "createProfileAttributes",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnersTypedAttributeUUID"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOwnersTypedAttributeUUID"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["profile"],
        "summary": "Delete existing profile attributes",
        "description": "Delete existing profile attributes",
        "operationId": "deleteProfileAttributes",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnersTypedAttributeUUID"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profile attributes deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOwnersTypedAttributeUUID"
                }
              }
            }
          },
          "404": {
            "description": "Profile not found"
          }
        }
      }
    },
    "/colleagues/tenants/{code}": {
      "put": {
        "tags": ["profile"],
        "summary": "Reset tenant for colleagues",
        "description": "Reset tenant for colleagues",
        "operationId": "resetTenant",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Tenant for colleagues resetted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found"
          }
        }
      }
    },
    "/colleagues/managers/resolve-empty": {
      "put": {
        "tags": ["profile"],
        "summary": "Update managers for colleagues without manager",
        "description": "Update managers for colleagues without manager",
        "operationId": "updateManagersForColleagues",
        "responses": {
          "202": {
            "description": "Request started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/cms/content-entries": {
      "get": {
        "tags": ["cms"],
        "summary": "Find Content by key in path",
        "operationId": "findByRequestQuery",
        "parameters": [
          {
            "name": "rq",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Find contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListContentEntry"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["cms"],
        "summary": "Update a Content",
        "operationId": "update_6",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseContentEntry"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["cms"],
        "summary": "Create a Content",
        "operationId": "create_5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseContentEntry"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/sessions/{sessionUuid}": {
      "put": {
        "tags": ["calibration"],
        "summary": "Updates Calibration Sessions for the user",
        "operationId": "updateSession",
        "parameters": [
          {
            "name": "sessionUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalibrationSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Calibration Session was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCalibrationSession"
                }
              }
            }
          },
          "404": {
            "description": "Calibration Session was not found"
          }
        }
      },
      "delete": {
        "tags": ["calibration"],
        "summary": "Updates Calibration Sessions for the user",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "sessionUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration Session was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Calibration Session was not found"
          }
        }
      }
    },
    "/calibration/sessions/{sessionUuid}/start": {
      "put": {
        "tags": ["calibration"],
        "summary": "Start Calibration Session",
        "operationId": "startSession",
        "parameters": [
          {
            "name": "sessionUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration Session was started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCalibrationSession"
                }
              }
            }
          },
          "404": {
            "description": "Calibration Session was not found"
          }
        }
      }
    },
    "/calibration/sessions/{sessionUuid}/close": {
      "put": {
        "tags": ["calibration"],
        "summary": "Start Calibration Session",
        "operationId": "closeSession",
        "parameters": [
          {
            "name": "sessionUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration Session was closed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCalibrationSession"
                }
              }
            }
          },
          "404": {
            "description": "Calibration Session was not found"
          }
        }
      }
    },
    "/calibration/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/statuses/{status}/reviews": {
      "put": {
        "tags": ["calibration"],
        "summary": "Update status of existing calibration reviews",
        "description": "Update status of existing calibration reviews",
        "operationId": "updateReviewsStatus_1",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "WAITING_FOR_APPROVAL",
                "APPROVED",
                "DECLINED",
                "WAITING_FOR_COMPLETION",
                "REQUESTED_TO_AMEND",
                "COMPLETED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewsStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reviews status updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMReviewStatus"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/calibration/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/reviews": {
      "get": {
        "tags": ["calibration"],
        "summary": "Returns accessible Calibration Reviews for the user",
        "operationId": "getReview_1",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration Reviews were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReview"
                }
              }
            }
          },
          "404": {
            "description": "Calibration Reviews were not found"
          }
        }
      },
      "put": {
        "tags": ["calibration"],
        "summary": "Update existing calibration review",
        "description": "Update existing review",
        "operationId": "updateReview_1",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Review"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Review updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReview"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "post": {
        "tags": ["calibration"],
        "summary": "Create a calibration review",
        "description": "Review created",
        "operationId": "createReview_1",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Review"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReview"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["calibration"],
        "summary": "Delete existing calibration review",
        "description": "Delete existing review",
        "operationId": "deleteReview_1",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/tips": {
      "get": {
        "tags": ["tip"],
        "summary": "Get tips",
        "operationId": "read",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "_sort": "title:DESC,updated-time:ASC",
              "published": "true",
              "organization-key_ne": "l1/group/l2/ho_c/l3/salaried/l4/wl5/#v1",
              "title_contains": "A",
              "description_ncontains": "B",
              "key_in": ["com.tesco.pma.tip", "com.tesco.pma.review"],
              "organization-name_nin": ["WL1", "WL2"],
              "created-time_lt": "2021-11-26T14:18:42.615Z",
              "created-time_lte": "2021-11-26T14:18:42.615Z",
              "updated-time_gt": "2021-11-25T14:36:33.587Z",
              "updated-time_gte": "2021-11-25T14:36:33.587Z",
              "organization-name_null": "true",
              "_start": "1",
              "_limit": "7",
              "_search": "A"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListTip"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["tip"],
        "summary": "Create a new tip or create a new version of an existing tip",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tip"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New Tip successfully created.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseTip"
                }
              }
            }
          }
        }
      }
    },
    "/processes/set-removal-time": {
      "post": {
        "tags": ["deployment"],
        "summary": "Set up removalTime for completed processes",
        "description": "Set up removal time",
        "operationId": "setRemovalTime",
        "responses": {
          "200": {
            "description": "Removal time was set up",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/processes/keys/{process-key}": {
      "post": {
        "tags": ["processes"],
        "summary": "Run process metadata by process key with parameters",
        "operationId": "runProcessByKey",
        "parameters": [
          {
            "name": "process-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "example": {
              "p1": "v1",
              "p2": "v2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Started process identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseString"
                }
              }
            }
          }
        }
      }
    },
    "/processes/archive": {
      "post": {
        "tags": ["deployment"],
        "summary": "Deploy process archive",
        "operationId": "deployProcess",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDeploymentInfo"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles": {
      "post": {
        "tags": ["performance-cycle"],
        "summary": "Create performance cycle",
        "description": "Performance cycle created",
        "operationId": "create_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PMCycle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Performance cycle created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMCycle"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{uuid}/deploy": {
      "post": {
        "tags": ["performance-cycle"],
        "summary": "Deploy performance cycle",
        "description": "Performance cycle deployed",
        "operationId": "deploy",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance cycle deployed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUUID"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/publish": {
      "post": {
        "tags": ["performance-cycle"],
        "summary": "Publish performance cycle",
        "description": "Performance cycle published",
        "operationId": "publish",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PMCycle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SPerformance cycle published",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMCycle"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/assignment": {
      "post": {
        "tags": ["processes"],
        "summary": "Run cycle assignment process",
        "operationId": "runCycleAssignmentProcess",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Started cycle assignment process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseString"
                }
              }
            }
          }
        }
      }
    },
    "/organisations": {
      "get": {
        "tags": ["organisation-dictionary"],
        "summary": "Get all organisation dictionaries",
        "operationId": "findAllOrganisationDictionaries",
        "responses": {
          "200": {
            "description": "List of organisation dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOrganisationDictionary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["organisation-dictionary"],
        "summary": "Create organisation dictionary",
        "operationId": "create_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationDictionary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created organisation dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseOrganisationDictionary"
                }
              }
            }
          }
        }
      }
    },
    "/org-objectives": {
      "get": {
        "tags": ["org-objective"],
        "summary": "Get all organisation objectives",
        "operationId": "getOrgObjectives",
        "responses": {
          "200": {
            "description": "Found organisation objectives",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOrgObjective"
                }
              }
            }
          },
          "404": {
            "description": "Organisation objectives not found"
          }
        }
      },
      "post": {
        "tags": ["org-objective"],
        "summary": "Create new organisation objectives",
        "description": "Organisation objectives created",
        "operationId": "createOrgObjectives",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrgObjective"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOrgObjective"
                }
              }
            }
          }
        }
      }
    },
    "/org-mapping": {
      "post": {
        "tags": ["org-mapping"],
        "summary": "Add organisation mapping",
        "operationId": "addOrgMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrgMapping"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mapping added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOrgMapping"
                }
              }
            }
          },
          "404": {
            "description": "Mapping failed"
          }
        }
      },
      "delete": {
        "tags": ["org-mapping"],
        "summary": "Remove organisation mapping",
        "operationId": "removeOrgMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrgMapping"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mapping removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Mapping not found"
          }
        }
      }
    },
    "/org-mapping/import": {
      "post": {
        "tags": ["org-mapping"],
        "summary": "Import organisation mapping",
        "description": "Organisation Mapping",
        "operationId": "importOrgMapping",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["file"],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Organisation mapping imported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseOrgMappingImportReport"
                }
              }
            }
          }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": ["notes"],
        "summary": "Find Notes by Folder",
        "operationId": "findByOwner_1",
        "parameters": [
          {
            "name": "ownerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Find Note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListNote"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["notes"],
        "summary": "Create a Note",
        "operationId": "createNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new Note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseNote"
                }
              }
            }
          }
        }
      }
    },
    "/notes/folders": {
      "get": {
        "tags": ["notes"],
        "summary": "Find a Folder by Owner",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "ownerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Find a folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListFolder"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["notes"],
        "summary": "Create a Folder",
        "operationId": "createFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new Folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseFolder"
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": ["file"],
        "summary": "Get Files information with the latest version applying search, filter and sorting",
        "description": "Get Files information with the latest version applying search, filter and sorting",
        "operationId": "get_2",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found filtered files data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListFile"
                }
              }
            }
          },
          "404": {
            "description": "Files data not found"
          }
        }
      },
      "post": {
        "tags": ["file"],
        "summary": "Upload Files",
        "description": "Upload Files",
        "operationId": "upload",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["files", "uploadMetadata"],
                "type": "object",
                "properties": {
                  "uploadMetadata": {
                    "type": "string",
                    "format": "binary"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "uploadMetadata": {
                  "contentType": "application/json"
                },
                "files": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Uploaded file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListFile"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileUuid}/deploy": {
      "post": {
        "tags": ["deployment"],
        "summary": "Deploy file resource by uuid",
        "description": "File deployed",
        "operationId": "deployByUuid",
        "parameters": [
          {
            "name": "fileUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deployed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseString"
                }
              }
            }
          }
        }
      }
    },
    "/files/deploy": {
      "post": {
        "tags": ["deployment"],
        "summary": "Deploy the last version of the file resource by path and filename",
        "description": "File deployed",
        "operationId": "deployByPathAndFilename",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file-name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deployed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseString"
                }
              }
            }
          }
        }
      }
    },
    "/feedbacks": {
      "get": {
        "tags": ["feedback"],
        "summary": "Get all feedbacks with all items",
        "operationId": "getAllFeedbacks",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "_sort": "target-colleague-first-name:DESC,updated-time:ASC",
              "read": "true",
              "colleague-uuid": "10000000-0000-0000-0000-000000000001",
              "target-colleague-uuid_ne": "10000000-0000-0000-0000-000000000002",
              "target-id": "f48c8772-4661-4373-8151-ea89796bb3e6",
              "status_in": ["DRAFT", "SUBMITTED"],
              "target-type_nin": ["GOAL", "OBJECTIVE"],
              "colleague-first-name_contains": "a",
              "colleague-last-name_ncontains": "Doe",
              "target-colleague-middle-name_contains": "jef",
              "created-time_lt": "2021-11-26T14:18:42.615Z",
              "created-time_lte": "2021-11-26T14:18:42.615Z",
              "updated-time_gt": "2021-11-25T14:36:33.587Z",
              "updated-time_gte": "2021-11-25T14:36:33.587Z",
              "target-id_null": "true",
              "_start": "1",
              "_limit": "7",
              "_search": "first or middle or last target colleague name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListFeedback"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["feedback"],
        "summary": "Create a new list of feedbacks with items",
        "operationId": "createFeedbacks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Feedback"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "List of feedbacks created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListFeedback"
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "post": {
        "tags": ["spring-rest-event-listener"],
        "operationId": "handle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "tags": ["deployment"],
        "summary": "Get list of deployments (identifier/name)",
        "operationId": "deployments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListDeploymentInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["deployment"],
        "summary": "Deploy multipart files",
        "operationId": "deploy_1",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["deploymentName", "files"],
                "type": "object",
                "properties": {
                  "deploymentName": {
                    "type": "string",
                    "format": "string"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDeploymentInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["deployment"],
        "summary": "Undeploy deployment by name",
        "operationId": "undeployByName",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListDeploymentInfo"
                }
              }
            }
          }
        }
      }
    },
    "/config-entries": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get published config entry structure by composite key",
        "operationId": "getPublishedEntryConfigStructureByCompositeKey",
        "parameters": [
          {
            "name": "compositeKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListConfigEntryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["config-entry"],
        "summary": "Create config entry",
        "operationId": "create_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created config entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/config-entries/{entryUuid}/publish": {
      "post": {
        "tags": ["config-entry"],
        "summary": "Publish config entry",
        "operationId": "publishEntryConfigStructure",
        "parameters": [
          {
            "name": "entryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Structure has been published",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["config-entry"],
        "summary": "Unpublish config entry",
        "operationId": "unpublishEntryConfigStructure",
        "parameters": [
          {
            "name": "entryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Structure has been unpublished",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues": {
      "post": {
        "tags": ["profile"],
        "summary": "Start import colleagues process",
        "operationId": "importColleagues",
        "parameters": [
          {
            "name": "save-before-assignment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["file"],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Colleagues was imported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseImportReport"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-codes/{code}/sharing": {
      "get": {
        "tags": ["review-sharing"],
        "summary": "Check if colleague reviews is shared",
        "operationId": "isColleagueShareReviews",
        "parameters": [
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Info about sharing reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["review-sharing"],
        "summary": "Share colleague reviews",
        "operationId": "shareReviews",
        "parameters": [
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reviews sharing have been enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["review-sharing"],
        "summary": "Stop sharing colleague reviews",
        "operationId": "stopSharingReviews",
        "parameters": [
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reviews sharing have been disabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/tenants/assignment": {
      "get": {
        "tags": ["profile"],
        "summary": "Get assignment tenant for colleagues",
        "description": "Get assignment tenant for colleagues",
        "operationId": "getAssignmentTenant",
        "parameters": [
          {
            "name": "colleagueUuids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assigned tenant for colleagues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueTenant"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["profile"],
        "summary": "Assignment tenant for colleagues",
        "description": "Assignment tenant for colleagues",
        "operationId": "startAssignmentTenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Assigned tenant for colleagues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueTenant"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/events": {
      "post": {
        "tags": ["cep"],
        "summary": "Consuming events",
        "description": "Consuming colleague changes events",
        "operationId": "processColleagueChangeEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColleagueChangeEventPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/colleagues/delete-expired-data": {
      "post": {
        "tags": ["colleagues"],
        "summary": "Manual start for deleting expired data",
        "operationId": "deleteExpiredData",
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/sessions": {
      "get": {
        "tags": ["calibration"],
        "summary": "Returns user's Calibration Sessions",
        "operationId": "getSessions",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration Sessions were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListCalibrationSession"
                }
              }
            }
          },
          "404": {
            "description": "Calibration Sessions were not found"
          }
        }
      },
      "post": {
        "tags": ["calibration"],
        "summary": "Creates Calibration Session",
        "operationId": "createSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalibrationSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Calibration Session was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCalibrationSession"
                }
              }
            }
          }
        }
      }
    },
    "/tips/{uuid}/publish": {
      "patch": {
        "tags": ["tip"],
        "summary": "Publish tip",
        "operationId": "publish_1",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tip published successfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseTip"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/{uuid}/statuses/{status}": {
      "patch": {
        "tags": ["performance-cycle"],
        "summary": "Update performance cycle status",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "COMPLETED",
                "DRAFT",
                "FAILED",
                "REGISTERED",
                "STARTED",
                "SUSPENDED",
                "TERMINATED",
                "SCHEDULED",
                "FINISHING",
                "FINISHED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated performance cycle  status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMCycle"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycle not found"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["user"],
        "summary": "Get me",
        "description": "Get user info for current authenticated user",
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUser"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUser"
                }
              }
            }
          }
        }
      }
    },
    "/tips/{uuid}": {
      "get": {
        "tags": ["tip"],
        "summary": "Get tip by uuid",
        "operationId": "read_1",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseTip"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["tip"],
        "summary": "Delete an existing Tip",
        "operationId": "delete",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "withHistory",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tip successfully deleted.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/tips/{uuid}/history": {
      "get": {
        "tags": ["tip"],
        "summary": "Get tip history",
        "operationId": "readHistory",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListTip"
                }
              }
            }
          }
        }
      }
    },
    "/reviews/{uuid}": {
      "get": {
        "tags": ["review"],
        "summary": "Get a review by its identifier",
        "operationId": "getReviewByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReview"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/reports/statistics-reviews": {
      "get": {
        "tags": ["report"],
        "summary": "Get Review Statistics Report Data with filters",
        "operationId": "getReviewsStatisticsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReportStatistics"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-reviews/colleague": {
      "get": {
        "tags": ["report"],
        "summary": "Get Review details Report Data with filters",
        "operationId": "getReviewsStatisticsDetailsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueReportTargeting"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-report/formats/excel": {
      "get": {
        "tags": ["report"],
        "summary": "Get Statistics Report as Resource",
        "operationId": "getStatisticsReportFile",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-overall-ratings": {
      "get": {
        "tags": ["report"],
        "summary": "Get Overall Rating Breakdown Statistics Report Data with filters",
        "operationId": "getReviewsOverallRatingStatisticsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReportStatistics"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-overall-ratings/colleague": {
      "get": {
        "tags": ["report"],
        "summary": "Get Overall Rating Breakdown Details Report Data with filters",
        "operationId": "getReviewsOverallRatingDetailsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueReportTargeting"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-new-to-business": {
      "get": {
        "tags": ["report"],
        "summary": "Get New To Business Report Data with filters",
        "operationId": "getNewToBusinessStatisticsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReportStatistics"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-new-to-business/colleague": {
      "get": {
        "tags": ["report"],
        "summary": "Get New To Business Report Data with filters",
        "operationId": "getNewToBusinessDeatilsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueReportTargeting"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-leadership-reviews": {
      "get": {
        "tags": ["report"],
        "summary": "Get Leadership Review Statistics Report Data with filters",
        "operationId": "getLeadershipReviewsStatisticsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReportStatistics"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-leadership-reviews/colleague": {
      "get": {
        "tags": ["report"],
        "summary": "Get Leadership Review Details Statistics Report Data with filters",
        "operationId": "getLeadershipReviewsDetailsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueReportTargeting"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-feedbacks": {
      "get": {
        "tags": ["report"],
        "summary": "Get Feedback Statistics Report Data with filters",
        "operationId": "getFeedbackStatisticsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReportStatistics"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-feedbacks/colleague": {
      "get": {
        "tags": ["report"],
        "summary": "Get Feedback Details Statistics Report Data with filters",
        "operationId": "getFeedbackDetailsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueReportTargeting"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-anniversary-reviews": {
      "get": {
        "tags": ["report"],
        "summary": "Get Anniversary Review Statistics Report Data with filters",
        "operationId": "getAnniversaryReviewsStatisticsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReportStatistics"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/statistics-anniversary-reviews/colleague": {
      "get": {
        "tags": ["report"],
        "summary": "Get Anniversary Review Details Statistics Report Data with filters",
        "operationId": "getAnniversaryReviewsDetailsReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueReportTargeting"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/overall-rating": {
      "get": {
        "tags": ["rating"],
        "summary": "Get overall rating",
        "operationId": "overall",
        "parameters": [
          {
            "name": "what_rating",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "how_rating",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rating calculated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMapStringString"
                }
              }
            }
          }
        }
      }
    },
    "/reports/objectives-report/formats/csv": {
      "get": {
        "tags": ["report"],
        "summary": "Get a Objectives Report",
        "operationId": "getObjectivesReportFile",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Report data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Report data not found"
          }
        }
      }
    },
    "/reports/mid-year-review-rating-report/formats/csv": {
      "get": {
        "tags": ["report"],
        "summary": "Get a Reviews Report",
        "operationId": "getMYRReviewsReportFile",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Report data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Report data not found"
          }
        }
      }
    },
    "/reports/linked-objective-report/formats/excel": {
      "get": {
        "tags": ["report"],
        "summary": "Get a Linked Objectives Report by year of cycle and statuses of review",
        "operationId": "getLinkedObjectivesReportFile",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Report data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Report data not found"
          }
        }
      }
    },
    "/reports/colleagues/total": {
      "get": {
        "tags": ["report"],
        "summary": "Get Feedback Statistics Report Data with filters",
        "operationId": "getTotalColleagueCount",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Statistics Report data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseInteger"
                }
              }
            }
          },
          "404": {
            "description": "Statistics Report data not found"
          }
        }
      }
    },
    "/reports/calibration-session": {
      "get": {
        "tags": ["report"],
        "summary": "Get calibration session report",
        "operationId": "getCalibrationSessionReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Calibration session Report data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Calibration session data not found"
          }
        }
      }
    },
    "/reports/calibration-overview": {
      "get": {
        "tags": ["report"],
        "summary": "Get calibration overview report",
        "operationId": "getCalibrationOverviewReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Calibration Overview Report data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Calibration Overview data not found"
          }
        }
      }
    },
    "/processes": {
      "get": {
        "tags": ["deployment"],
        "summary": "Get list of deployed processes",
        "operationId": "processes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListProcessInfo"
                }
              }
            }
          }
        }
      }
    },
    "/processes/metadata": {
      "get": {
        "tags": ["processes"],
        "summary": "Get process metadata by process key, e.g., group_a1, group_a2, group_b, group_c",
        "operationId": "getMetadata",
        "parameters": [
          {
            "name": "process-key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the process metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePMCycleMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/mappings/keys": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get performance cycle mapping keys",
        "operationId": "getPmCycleMappingKeys",
        "responses": {
          "200": {
            "description": "Found performance cycle mapping keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseSetString"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycle mapping keys not found"
          }
        }
      }
    },
    "/pm-cycles/mappings/keys/colleagues": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get performance cycle mapping keys per colleagues",
        "operationId": "getPmCycleMappingKeyByColleagues",
        "parameters": [
          {
            "name": "uuids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found performance cycle mapping keys per colleagues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMapUUIDString"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycle mapping keys not found"
          }
        }
      }
    },
    "/pm-cycles/files/{uuid}/metadata": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get performance cycle metadata by file UUID",
        "operationId": "getPmCycleMetadata",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeForms",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found performance cycle metadata by file UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCompositePMCycleMetadataResponse"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycle metadata not found"
          },
          "500": {
            "description": "Exception while parsing a form",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCompositePMCycleMetadataResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pm-cycles/": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get all performance cycles",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "uuid": "3fa85f64-5717-4562-b3fc-2c963f66af10",
              "entry-config-key_nin": ["group_a1", "group_c"],
              "template-uuid_in": ["3fa85f64-5717-4562-b3fc-2c963f66af10", "3fa85f64-5717-4562-b3fc-2c963f66afa6"],
              "name_ne": "test1",
              "status_in": ["ACTIVE", "INACTIVE"],
              "type_ne": "HIRING",
              "created-by": "3fa85f64-5717-4562-b3fc-2c963f66afa4",
              "start-time_lt": "2021-11-26T14:18:42.615Z",
              "start-time_lte": "2021-11-26T14:18:42.615Z",
              "end-time_gt": "2021-11-25T14:36:33.587Z",
              "end-time_gte": "2021-11-25T14:36:33.587Z"
            }
          },
          {
            "name": "includeMetadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found all performance cycles with status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListPMCycle"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycles for the status not found"
          }
        }
      }
    },
    "/pdp/template": {
      "get": {
        "tags": ["pdp"],
        "summary": "Download PDP template file",
        "description": "Download PDP template file",
        "operationId": "downloadTemplate",
        "responses": {
          "200": {
            "description": "File downloaded",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/octet-stream": {}
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pdp/goals/{goalUuid}": {
      "get": {
        "tags": ["pdp"],
        "summary": "Get a PDP Goal by its uuid",
        "operationId": "getGoal",
        "parameters": [
          {
            "name": "goalUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the PDP Goal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePDPResponse"
                }
              }
            }
          },
          "404": {
            "description": "PDP Goal not found"
          }
        }
      },
      "delete": {
        "tags": ["pdp"],
        "summary": "Delete existing PDP Goal from a Plan by its uuid",
        "description": "Delete existing PDP Goal",
        "operationId": "deleteGoal",
        "parameters": [
          {
            "name": "goalUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PDP Goal deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "PDP Goal not found"
          }
        }
      }
    },
    "/pdp/goals/numbers/{number}": {
      "get": {
        "tags": ["pdp"],
        "summary": "Get a PDP Goal by its colleague and number",
        "operationId": "getGoal_1",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the PDP Goal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePDPResponse"
                }
              }
            }
          },
          "404": {
            "description": "PDP Goal not found"
          }
        }
      }
    },
    "/pdp/goals/early-achievement-date": {
      "get": {
        "tags": ["pdp"],
        "summary": "Get the earliest achievement date of PDP Goals by its colleague",
        "operationId": "getEarlyAchievementDate",
        "responses": {
          "200": {
            "description": "Found achievement date of Goal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseLocalDate"
                }
              }
            }
          },
          "404": {
            "description": "PDP Goal not found"
          }
        }
      }
    },
    "/org-objectives/published": {
      "get": {
        "tags": ["org-objective"],
        "summary": "Get published organisation objectives",
        "operationId": "getPublishedOrgObjectives",
        "responses": {
          "200": {
            "description": "Found organisation objectives",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListOrgObjective"
                }
              }
            }
          },
          "404": {
            "description": "Organisation objectives not found"
          }
        }
      }
    },
    "/org-hierarchies": {
      "get": {
        "tags": ["organisation-dictionary"],
        "summary": "Get organisation hierarchy for a legal entity",
        "description": "Organisation Hierarchy For Legal Entity",
        "operationId": "getOrganisationHierarchy",
        "parameters": [
          {
            "name": "legal-entity-name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation Hierarchy For Legal Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseOrgHierarchy"
                }
              }
            }
          },
          "404": {
            "description": "Organisation Hierarchy For Legal Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseOrgHierarchy"
                }
              }
            }
          }
        }
      }
    },
    "/managers/{managerUuid}/reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of colleagues reviews by managerUuid",
        "operationId": "getTeamView",
        "parameters": [
          {
            "name": "managerUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "colleague-cycle-status_in": ["ACTIVE", "SCHEDULED", "STARTED", "FINISHING", "FINISHED", "COMPLETED"],
              "review-status_in": [
                "DRAFT",
                "WAITING_FOR_APPROVAL",
                "APPROVED",
                "DECLINED",
                "WAITING_FOR_COMPLETION",
                "REQUESTED_TO_AMEND",
                "COMPLETED"
              ],
              "review-type_in": ["OBJECTIVE", "MYR", "EYR", "QUARTER", "CALIBRATION"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueView"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found"
          }
        }
      }
    },
    "/managers/{managerUuid}/reviews/full-team": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of full team reviews by managerUuid",
        "operationId": "getFullTeamView",
        "parameters": [
          {
            "name": "managerUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "colleague-cycle-status_in": ["ACTIVE", "SCHEDULED", "STARTED", "FINISHING", "FINISHED", "COMPLETED"],
              "review-status_in": [
                "DRAFT",
                "WAITING_FOR_APPROVAL",
                "APPROVED",
                "DECLINED",
                "WAITING_FOR_COMPLETION",
                "REQUESTED_TO_AMEND",
                "COMPLETED"
              ],
              "review-type_in": ["OBJECTIVE", "MYR", "EYR", "QUARTER", "CALIBRATION"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueView"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found"
          }
        }
      }
    },
    "/live": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response in the case that the API Domain is in a healthy working state",
        "operationId": "getLive",
        "responses": {
          "200": {
            "description": "Return a successful response in the case that the API Domain is in a healthy working state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/hc": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response if this instance is able to receive traffic",
        "operationId": "getHc",
        "responses": {
          "200": {
            "description": "Return a successful response if this node is able to receive traffic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileUuid}": {
      "get": {
        "tags": ["file"],
        "summary": "Get File information with the latest version by its uuid",
        "description": "Get File information with the latest version by its uuid",
        "operationId": "get_3",
        "parameters": [
          {
            "name": "fileUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the file data by its uuid",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseFile"
                }
              }
            }
          },
          "404": {
            "description": "File data not found"
          }
        }
      },
      "delete": {
        "tags": ["file"],
        "summary": "Delete existing File by its uuid",
        "description": "Delete existing file",
        "operationId": "delete_5",
        "parameters": [
          {
            "name": "fileUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/files/{fileUuid}/download": {
      "get": {
        "tags": ["file"],
        "summary": "Download File",
        "description": "Download File",
        "operationId": "download",
        "parameters": [
          {
            "name": "fileUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/octet-stream": {}
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/files/versions": {
      "get": {
        "tags": ["file"],
        "summary": "Get all information about File with All Versions by its name and path",
        "description": "Get all information about File with All Versions by its name and path",
        "operationId": "getAllVersions",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the file data of all versions by path and name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListFile"
                }
              }
            }
          },
          "404": {
            "description": "File data not found"
          }
        }
      },
      "delete": {
        "tags": ["file"],
        "summary": "Delete existing Files by its path, name and versions",
        "description": "Delete existing files",
        "operationId": "delete_6",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Files deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Files not found"
          }
        }
      }
    },
    "/files/last": {
      "get": {
        "tags": ["file"],
        "summary": "Get Files information with the latest version by file name and path",
        "description": "Get Files information with the latest version by file name and path",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the file data by its path and name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseFile"
                }
              }
            }
          },
          "404": {
            "description": "File data not found"
          }
        }
      }
    },
    "/feedbacks/requested-count": {
      "get": {
        "tags": ["feedback"],
        "summary": "Get requested feedbacks count for colleague",
        "operationId": "getRequestedFeedbackCount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseInteger"
                }
              }
            }
          }
        }
      }
    },
    "/feedbacks/given-count": {
      "get": {
        "tags": ["feedback"],
        "summary": "Get given feedbacks count for colleague",
        "operationId": "getGivenFeedbackCount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseInteger"
                }
              }
            }
          }
        }
      }
    },
    "/dictionaries/{dictionary}": {
      "get": {
        "tags": ["dictionaries"],
        "summary": "Get dictionary items",
        "operationId": "findAll",
        "parameters": [
          {
            "name": "dictionary",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the dictionary items",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListGeneralDictionaryItem"
                }
              }
            }
          }
        }
      }
    },
    "/dictionaries/{dictionary}/{id}": {
      "get": {
        "tags": ["dictionaries"],
        "summary": "Get dictionary item",
        "operationId": "read_2",
        "parameters": [
          {
            "name": "dictionary",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the dictionary item",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseGeneralDictionaryItem"
                }
              }
            }
          }
        }
      }
    },
    "/decisions": {
      "get": {
        "tags": ["deployment"],
        "summary": "Get list of deployed decision matrix",
        "operationId": "decisions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListDecisionInfo"
                }
              }
            }
          }
        }
      }
    },
    "/config-entries/{entryUuid}/unpublished": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get unpublished config entry structure by root identifier",
        "operationId": "getUnpublishedEntryConfigStructure",
        "parameters": [
          {
            "name": "entryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseConfigEntryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/config-entries/unpublished": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get unpublished structure by composite key",
        "operationId": "getUnpublished",
        "parameters": [
          {
            "name": "compositeKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListConfigEntryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/config-entries/roots": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get all published root config entries ",
        "operationId": "getPublishedRoots",
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListConfigEntryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/config-entries/roots/unpublished": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get all unpublished root config entries ",
        "operationId": "getUnpublishedRoots",
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListConfigEntryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/config-entries/colleagues": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get colleagues by composite key",
        "operationId": "findColleaguesByCompositeKey",
        "parameters": [
          {
            "name": "compositeKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Colleagues list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueEntity"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}": {
      "get": {
        "tags": ["profile"],
        "summary": "Get profile by colleague uuid",
        "description": "Get profile by colleague uuid",
        "operationId": "getProfileByColleagueUuid",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseColleagueProfile"
                }
              }
            }
          },
          "404": {
            "description": "Profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseColleagueProfile"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/reviews/{reviewUuid}/files": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of reviews by colleagueUuid and reviewUuid",
        "operationId": "getReviewsFilesByColleagueAndReview",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reviewUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListFile"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/reviews/files": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of reviews by colleagueUuid",
        "operationId": "getReviewsFilesByColleague",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListFile"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/reviews/files/{fileUuid}/download": {
      "get": {
        "tags": ["review"],
        "summary": "Download Review File",
        "description": "Download Review File",
        "operationId": "download_1",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review File downloaded",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Review File not found",
            "content": {
              "application/octet-stream": {}
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/review-codes/{code}/sharing": {
      "get": {
        "tags": ["review-sharing"],
        "summary": "Get all shared reviews by their manager",
        "operationId": "getSharedReviewsForColleague",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReview"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/timeline": {
      "get": {
        "tags": ["review"],
        "summary": "Get cycle timeline for colleague",
        "operationId": "getTimelineByColleague",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "colleague-cycle-status_in": ["ACTIVE", "SCHEDULED", "STARTED", "FINISHING", "FINISHED", "COMPLETED"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the cycle timeline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListTimelinePoint"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of reviews by its cycleUuid, colleagueUuid",
        "operationId": "getReviewsByColleague",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFiles",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "colleague-cycle-status_in": ["ACTIVE", "SCHEDULED", "STARTED", "FINISHING", "FINISHED", "COMPLETED"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListReview"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/metadata": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get full metadata for colleague and cycle",
        "operationId": "getMetadataByColleagueAndCycle",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeForms",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the cycle metadata for colleague and cycle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCompositePMCycleMetadataResponse"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycle not found"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/colleague-cycles": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get colleague cycles for colleague and cycle",
        "operationId": "getColleagueCycles",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cycleUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "colleague-cycle-status_in": ["ACTIVE", "SCHEDULED", "STARTED", "FINISHING", "FINISHED", "COMPLETED"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found colleague cycles for colleague and cycle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListPMColleagueCycle"
                }
              }
            }
          },
          "404": {
            "description": "Colleague cycle not found"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get performance cycles per colleague",
        "operationId": "getPmCyclesByColleague",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "allowedStatuses",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found performance cycles per colleague",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListPMCycle"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycles not found"
          }
        }
      }
    },
    "/colleagues/{colleagueUuid}/metadata": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get full metadata for colleague",
        "operationId": "getMetadataByColleague",
        "parameters": [
          {
            "name": "colleagueUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeForms",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the cycle metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCompositePMCycleMetadataResponse"
                }
              }
            }
          },
          "404": {
            "description": "Performance cycle not found"
          }
        }
      }
    },
    "/colleagues/suggestions": {
      "get": {
        "tags": ["colleagues"],
        "summary": "Autocomplete search among colleagues by full name and manager ID",
        "operationId": "getSuggestions",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search among colleagues by full name and manager ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueProfile"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/requests/{requestUuid}": {
      "get": {
        "tags": ["profile"],
        "summary": "Get import request by uuid",
        "operationId": "getImportRequest",
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseImportRequest"
                }
              }
            }
          },
          "404": {
            "description": "Request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseImportRequest"
                }
              }
            }
          }
        }
      }
    },
    "/colleagues/requests/{requestUuid}/errors": {
      "get": {
        "tags": ["profile"],
        "summary": "Get import request errors by request uuid",
        "operationId": "getImportRequestErrors",
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request errors found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListImportError"
                }
              }
            }
          }
        }
      }
    },
    "/cms/help-faqs": {
      "get": {
        "tags": ["cms"],
        "summary": "Find Content Entries by keys",
        "operationId": "getHelpFaqContentEntries",
        "parameters": [
          {
            "name": "keys",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Find Content Entries by keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMapStringListContentEntry"
                }
              }
            }
          }
        }
      }
    },
    "/cms/help-faq-urls": {
      "get": {
        "tags": ["cms"],
        "summary": "Find URLs by keys",
        "operationId": "getHelpFaqUrls",
        "parameters": [
          {
            "name": "keys",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Find URLs by keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMapStringString"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/statistics": {
      "get": {
        "tags": ["calibration"],
        "summary": "Returns calibration statistics accessible for the user",
        "operationId": "getCalibrationStatistics",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration statistics were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMapStringTotalCount"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/statistics/ratings": {
      "get": {
        "tags": ["calibration"],
        "summary": "Returns calibration rating statistics accessible for the user",
        "operationId": "getRatingStatistics",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration rating statistics were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMapStringTotalCount"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/sessions/{sessionUuid}/statistics/ratings": {
      "get": {
        "tags": ["calibration"],
        "summary": "Returns calibration rating statistics by calibration session",
        "operationId": "getSessionRatingStatistics",
        "parameters": [
          {
            "name": "sessionUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "review-rating_in": ["OUTSTANDING", "GREAT", "SATISFACTORY", "BELOW_EXPECTED", "UNSUBMITTED"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration rating statistics were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMapStringTotalCount"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/sessions/{sessionUuid}/reviews": {
      "get": {
        "tags": ["calibration"],
        "summary": "Gets reviews by Calibration Sessions",
        "operationId": "getSessionReviews",
        "parameters": [
          {
            "name": "sessionUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            },
            "example": {
              "review-rating_in": ["OUTSTANDING", "GREAT", "SATISFACTORY", "BELOW_EXPECTED", "UNSUBMITTED"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of session reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueReview"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/sessions/{sessionUuid}/colleagues": {
      "get": {
        "tags": ["calibration"],
        "summary": "Gets colleagues by Calibration Sessions",
        "operationId": "getSuggestions_1",
        "parameters": [
          {
            "name": "sessionUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of session colleagues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueSimple"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/sessions/filters": {
      "get": {
        "tags": ["calibration"],
        "summary": "Get filters by permissions and selected filters",
        "operationId": "getColleagueFilterOptions",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of available filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseColleagueFilterOptions"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/sessions/colleagues": {
      "get": {
        "tags": ["calibration"],
        "summary": "Get colleagues for calibration by filter params",
        "operationId": "getColleagues",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of available filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListCalibrationColleague"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/reviews": {
      "get": {
        "tags": ["calibration"],
        "summary": "Returns accessible Calibration Reviews for the user",
        "operationId": "getReviews_1",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration Reviews were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListColleagueReview"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/reviews/{uuid}": {
      "get": {
        "tags": ["calibration"],
        "summary": "Get a calibration review by its identifier",
        "operationId": "getReviewByUuid_1",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseReview"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/audit-logs": {
      "get": {
        "tags": ["org-objective"],
        "summary": "Get audit log of organisation objective actions",
        "operationId": "getAuditLogReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found audit log data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListAuditOrgObjectiveReport"
                }
              }
            }
          }
        }
      }
    },
    "/_working": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response in the case that the API Domain is in a healthy working state",
        "operationId": "getWorking",
        "responses": {
          "200": {
            "description": "Return a successful response in the case that the API Domain is in a healthy working state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/_status": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a summary of the health check results for API Domain",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Return a summary of the health check results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/_ready": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response if this instance is able to receive traffic",
        "operationId": "getReady",
        "responses": {
          "200": {
            "description": "Return a successful response if this node is able to receive traffic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/_healthcheck": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return the status of API domain and all its components and dependencies",
        "operationId": "getOverallHealthCheck",
        "responses": {
          "200": {
            "description": "Return the status of API domain and all its components, dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverallHealth"
                }
              }
            }
          }
        }
      }
    },
    "/_environment": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return information about server/node/instance including: version, build, os, etc",
        "operationId": "getEnvironment",
        "responses": {
          "200": {
            "description": "Return a summary of the server and build",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentHealth"
                }
              }
            }
          }
        }
      }
    },
    "/reviews/notes/{noteId}": {
      "delete": {
        "tags": ["review"],
        "summary": "Delete a note for review",
        "operationId": "deleteReviewNote",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Note not found"
          }
        }
      }
    },
    "/reviews/files/{fileUuid}": {
      "delete": {
        "tags": ["review"],
        "summary": "Delete Review File by its uuid",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "fileUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review File deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Review File not found"
          }
        }
      }
    },
    "/processes/{processName}": {
      "delete": {
        "tags": ["deployment"],
        "summary": "Undeploy all version of process by process key(name)",
        "operationId": "undeployProcess",
        "parameters": [
          {
            "name": "processName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseString"
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{id}": {
      "delete": {
        "tags": ["deployment"],
        "summary": "Undeploy deployment by id",
        "operationId": "undeploy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListDeploymentInfo"
                }
              }
            }
          }
        }
      }
    },
    "/cms/content-entries/{uuid}": {
      "delete": {
        "tags": ["cms"],
        "summary": "Delete a Content",
        "operationId": "delete_8",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a Content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          }
        }
      }
    },
    "/calibration/sessions/{sessionUuid}/cancel": {
      "delete": {
        "tags": ["calibration"],
        "summary": "Cancels a Calibration Session",
        "operationId": "cancelSessions",
        "parameters": [
          {
            "name": "sessionUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration Session Cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseVoid"
                }
              }
            }
          },
          "404": {
            "description": "Calibration Session cannot be cancelled"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "countryCode": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "Colleague": {
        "type": "object",
        "properties": {
          "colleagueUUID": {
            "type": "string",
            "format": "uuid"
          },
          "employeeId": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "effectivity": {
            "$ref": "#/components/schemas/Effectivity"
          },
          "externalSystems": {
            "$ref": "#/components/schemas/ExternalSystems"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "serviceDates": {
            "$ref": "#/components/schemas/ServiceDates"
          },
          "workRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkRelationship"
            }
          },
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Skill"
            }
          }
        }
      },
      "ColleagueProfile": {
        "type": "object",
        "properties": {
          "colleague": {
            "$ref": "#/components/schemas/Colleague"
          },
          "profileAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnersTypedAttributeUUID"
            }
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          }
        },
        "readOnly": true
      },
      "Contact": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "workPhoneNumber": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        }
      },
      "ContractType": {
        "type": "object",
        "properties": {
          "sourceCode": {
            "type": "string"
          },
          "sourceName": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Department": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "businessType": {
            "type": "string"
          }
        }
      },
      "Effectivity": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "ExternalSystems": {
        "type": "object",
        "properties": {
          "sourceSystem": {
            "type": "string"
          },
          "iam": {
            "$ref": "#/components/schemas/IamSourceSystem"
          }
        }
      },
      "Grade": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "IamSourceSystem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "costCategory": {
            "type": "string"
          }
        }
      },
      "LegalEmployer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ownerColleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "referenceColleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "referenceColleagueProfile": {
            "$ref": "#/components/schemas/ColleagueProfile"
          },
          "status": {
            "type": "string",
            "enum": ["CREATED", "ARCHIVED"]
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          },
          "folderUuid": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "OwnersTypedAttributeUUID": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["STRING", "DATE", "NUMBER", "BOOLEAN"]
          }
        }
      },
      "Position": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "teamName": {
            "type": "string"
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "ServiceDates": {
        "type": "object",
        "properties": {
          "hireDate": {
            "type": "string",
            "format": "date"
          },
          "leavingDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Skill": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["PRIMARY", "SECONDARY"]
          }
        }
      },
      "Tenant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "WorkRelationship": {
        "type": "object",
        "properties": {
          "locationUUID": {
            "type": "string"
          },
          "contractType": {
            "$ref": "#/components/schemas/ContractType"
          },
          "colleagueType": {
            "type": "string",
            "enum": ["EMPLOYEE", "EXTERNAL", "CONTRACTOR"]
          },
          "workingStatus": {
            "type": "string",
            "enum": ["ACTIVE", "INACTIVE", "SUSPENDED", "INACTIVE_PAID"]
          },
          "type": {
            "type": "string",
            "enum": ["PRIMARY"]
          },
          "defaultExpenseAccount": {
            "type": "string"
          },
          "peopleGroup": {
            "type": "string"
          },
          "legalEmployer": {
            "$ref": "#/components/schemas/LegalEmployer"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "grade": {
            "$ref": "#/components/schemas/Grade"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "job": {
            "$ref": "#/components/schemas/Job"
          },
          "actionCode": {
            "type": "string"
          },
          "actionReasonCode": {
            "type": "string"
          },
          "userStatus": {
            "type": "string"
          },
          "workSchedule": {
            "type": "string"
          },
          "employmentType": {
            "type": "string"
          },
          "salaryFrequency": {
            "type": "string"
          },
          "workingHours": {
            "type": "string"
          },
          "costCenter": {
            "type": "string"
          },
          "assignmentId": {
            "type": "string"
          },
          "primaryEntity": {
            "type": "string"
          },
          "workingInHiredCountry": {
            "type": "boolean"
          },
          "isManager": {
            "type": "boolean"
          },
          "workLevel": {
            "type": "string",
            "enum": ["COLLEAGUE", "WL1", "WL2", "WL3", "WL4", "WL5"]
          },
          "managerUUID": {
            "type": "string",
            "format": "uuid"
          },
          "manager": {
            "$ref": "#/components/schemas/Colleague"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RestResponseReviewNote": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ReviewNote"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ReviewNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ownerColleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "referenceColleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "referenceColleagueProfile": {
            "$ref": "#/components/schemas/ColleagueProfile"
          },
          "status": {
            "type": "string",
            "enum": ["CREATED", "ARCHIVED"]
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          },
          "folderUuid": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "reviewUuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "RestResponseMapUUIDBoolean": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ColleagueSimple": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "businessType": {
            "type": "string"
          },
          "lineManager": {
            "$ref": "#/components/schemas/ColleagueSimple"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/FileType"
          },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "ACTIVE", "INACTIVE"]
          },
          "description": {
            "type": "string"
          },
          "fileDate": {
            "type": "string",
            "format": "date-time"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "fileLength": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "fileContent": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "FileType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "PMCycle": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "entryConfigKey": {
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/File"
          },
          "name": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/ColleagueSimple"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "COMPLETED",
              "DRAFT",
              "FAILED",
              "REGISTERED",
              "STARTED",
              "SUSPENDED",
              "TERMINATED",
              "SCHEDULED",
              "FINISHING",
              "FINISHED"
            ]
          },
          "type": {
            "type": "string",
            "enum": ["FISCAL", "HIRING"]
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "properties": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PMCycleMetadata"
          }
        }
      },
      "PMCycleElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"]
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cycleType": {
            "type": "string",
            "enum": ["FISCAL", "HIRING"]
          },
          "timelinePoints": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PMTimelinePointElement"
                },
                {
                  "$ref": "#/components/schemas/PMReviewElement"
                }
              ]
            }
          }
        }
      },
      "PMCycleMetadata": {
        "type": "object",
        "properties": {
          "cycle": {
            "$ref": "#/components/schemas/PMCycleElement"
          }
        }
      },
      "PMFormElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"]
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "key": {
            "type": "string"
          }
        }
      },
      "PMReviewElement": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PMTimelinePointElement"
          },
          {
            "type": "object",
            "properties": {
              "reviewType": {
                "type": "string",
                "enum": ["OBJECTIVE", "MYR", "EYR", "QUARTER", "CALIBRATION"]
              },
              "form": {
                "$ref": "#/components/schemas/PMFormElement"
              }
            }
          }
        ]
      },
      "PMTimelinePointElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"]
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RestResponsePMCycle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/PMCycle"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseVoid": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "PMCycleUpdateFormRequest": {
        "type": "object",
        "properties": {
          "changeFrom": {
            "$ref": "#/components/schemas/PMFormRequest"
          },
          "changeTo": {
            "$ref": "#/components/schemas/PMFormRequest"
          }
        }
      },
      "PMFormRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "PDPGoal": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "colleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "achievementDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "PUBLISHED", "UNPUBLISHED"]
          }
        }
      },
      "RestResponseListPDPGoal": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PDPGoal"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "OrganisationDictionary": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestResponseOrganisationDictionary": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/OrganisationDictionary"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "OrgObjective": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "PUBLISHED", "UNPUBLISHED"]
          },
          "title": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestResponseListOrgObjective": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgObjective"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseNote": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Note"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "Folder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ownerColleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "parentFolderUuid": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "RestResponseFolder": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Folder"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "Feedback": {
        "required": ["colleagueUuid", "status", "targetColleagueUuid"],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "colleagueUuid": {
            "type": "string",
            "description": "Author. Colleague from whom feedback is written or requested.",
            "format": "uuid"
          },
          "colleagueProfile": {
            "$ref": "#/components/schemas/ColleagueProfile"
          },
          "targetColleagueUuid": {
            "type": "string",
            "description": "Colleague to whom feedback is given.",
            "format": "uuid"
          },
          "targetColleagueProfile": {
            "$ref": "#/components/schemas/ColleagueProfile"
          },
          "targetType": {
            "type": "string",
            "description": "Target type: GOAL, OBJECTIVE, VALUE_BEHAVIOR, OTHER.",
            "enum": ["GOAL", "OBJECTIVE", "VALUE_BEHAVIOR", "OTHER"]
          },
          "targetId": {
            "type": "string",
            "description": "Object identifier that is feedback given on/to or requested about/from."
          },
          "read": {
            "type": "boolean",
            "description": "Checkbox. False for Unread feedback.",
            "default": false
          },
          "status": {
            "type": "string",
            "description": "Status: DRAFT, SUBMITTED, PENDING, COMPLETED.",
            "enum": ["DRAFT", "SUBMITTED", "PENDING", "COMPLETED"]
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "feedbackItems": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedbackItem"
            }
          }
        }
      },
      "FeedbackItem": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "Item code. For example, whatWellDone, whatFocusOn, comment or question1, etc."
          },
          "content": {
            "type": "string",
            "description": "Body of feedback item. Answer for question or comment."
          },
          "feedbackUuid": {
            "type": "string",
            "description": "Link to feedback",
            "format": "uuid"
          }
        },
        "description": "The Feedback Item. Answers for questions, comments or free form feedback."
      },
      "RestResponseFeedback": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Feedback"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ConfigEntry": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GeneralDictionaryItem"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "parentUuid": {
            "type": "string",
            "format": "uuid"
          },
          "compositeKey": {
            "type": "string"
          }
        }
      },
      "GeneralDictionaryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["OBJECTIVE", "MYR", "EYR", "QUARTER", "CALIBRATION"]
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "DECLINED",
              "WAITING_FOR_COMPLETION",
              "REQUESTED_TO_AMEND",
              "COMPLETED"
            ]
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "tlPointUuid": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "colleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "properties": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "changeStatusReason": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          }
        }
      },
      "UpdateReviewsStatusRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          }
        }
      },
      "RestResponsePMReviewStatus": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "DECLINED",
              "WAITING_FOR_COMPLETION",
              "REQUESTED_TO_AMEND",
              "COMPLETED"
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListReview": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseReview": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Review"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListOwnersTypedAttributeUUID": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnersTypedAttributeUUID"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ContentEntry": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "PUBLISHED", "UNPUBLISHED"]
          },
          "contentEntryType": {
            "type": "string",
            "enum": ["GENERAL", "MENU"]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "properties": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RestResponseContentEntry": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ContentEntry"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "CalibrationSession": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["CREATED", "STARTED", "UPDATED", "COMPLETED"]
          },
          "lastUpdatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "ownerUuid": {
            "type": "string",
            "format": "uuid"
          },
          "participants": {
            "$ref": "#/components/schemas/RequestQuery"
          }
        }
      },
      "Condition": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string"
          },
          "operand": {
            "type": "string",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "CONTAINS",
              "NOT_CONTAINS",
              "IN",
              "NOT_IN",
              "LESS_THAN",
              "LESS_THAN_EQUALS",
              "GREATER_THAN",
              "GREATER_THAN_EQUALS",
              "LIKE",
              "NULL"
            ]
          },
          "value": {
            "type": "object"
          }
        }
      },
      "ConditionGroup": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "_type": {
            "type": "string",
            "enum": ["OR", "AND"]
          }
        }
      },
      "RequestQuery": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "_start": {
            "type": "integer",
            "format": "int32"
          },
          "_limit": {
            "type": "integer",
            "format": "int32"
          },
          "_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionGroup"
            }
          },
          "_search": {
            "type": "string"
          },
          "_sort": {
            "type": "string",
            "writeOnly": true
          }
        },
        "example": "{\n    \"_sort\": \"field1:DESC,field2:ASC\",\n    \"field1\": \"A\",\n    \"field2_ne\": \"5\",\n    \"field3_contains\": \"A\",\n    \"field4_ncontains\": \"B\",\n    \"field5_in\": [\"A\",\"B\"],\n    \"field6_in[0]\": \"A\",\n    \"field6_in[1]\": \"B\",\n    \"field6_in[2]\": \"C\",\n    \"field7_nin\": [\"C\",\"D\"],\n    \"field8_lt\": \"5\",\n    \"field9_lte\": \"5\",\n    \"field10_gt\": \"5\",\n    \"field11_gte\": \"5\",\n    \"field12_null\": \"true\",\n    \"_groups\": [{ \"\n             \"_type\": \"OR\",\n             \"field2_eq\": \"B\",\n             \"field3_eq\": \"C\"}],\n    \"_start\": \"1\",\n    \"_limit\": \"7\",\n    \"_search\": \"A\"\n}"
      },
      "Sort": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "order": {
            "type": "string",
            "enum": ["ASC", "DESC"]
          }
        }
      },
      "RestResponseCalibrationSession": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/CalibrationSession"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "Tip": {
        "required": ["description", "imageLink", "key", "targetOrganisation", "title"],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "integer",
            "description": "History management.",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "description": "Link to frontend component or page.",
            "example": "com.tesco.pma.tip"
          },
          "title": {
            "type": "string",
            "description": "Title.",
            "example": "Do you know?"
          },
          "description": {
            "type": "string",
            "description": "Description.",
            "example": "That you can submit new objectives at any time during the performance cycle?"
          },
          "targetOrganisation": {
            "$ref": "#/components/schemas/ConfigEntry"
          },
          "imageLink": {
            "type": "string",
            "description": "Image link.",
            "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
          },
          "published": {
            "type": "boolean",
            "description": "Published checkbox.",
            "example": false
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RestResponseTip": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Tip"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseString": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "DeploymentInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "deploymentTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RestResponseDeploymentInfo": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/DeploymentInfo"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseUUID": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "string",
            "format": "uuid"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "BusinessGroup": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "departments": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Department"
            }
          }
        }
      },
      "Function": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "businessGroups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessGroup"
            }
          },
          "departments": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Department"
            }
          }
        }
      },
      "LegalEntity": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OrgMapping": {
        "type": "object",
        "properties": {
          "legalEntity": {
            "$ref": "#/components/schemas/LegalEntity"
          },
          "function": {
            "$ref": "#/components/schemas/Function"
          },
          "businessGroup": {
            "$ref": "#/components/schemas/BusinessGroup"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          }
        }
      },
      "RestResponseListOrgMapping": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgMapping"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ImportError": {
        "type": "object",
        "properties": {
          "requestUuid": {
            "type": "string",
            "format": "uuid"
          },
          "fieldSetId": {
            "type": "string"
          },
          "colleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "OrgMappingImportReport": {
        "type": "object",
        "properties": {
          "requestUuid": {
            "type": "string",
            "format": "uuid"
          },
          "importedOrgMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgMapping"
            }
          },
          "warn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportError"
            }
          }
        }
      },
      "RestResponseOrgMappingImportReport": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/OrgMappingImportReport"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListFile": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListFeedback": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "eventProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "callbackEvent": {
            "$ref": "#/components/schemas/Event"
          },
          "eventName": {
            "type": "string"
          },
          "eventPriority": {
            "type": "string",
            "enum": [
              "HIGHEST",
              "HIGH_H",
              "HIGH",
              "HIGH_L",
              "NORMAL_H",
              "NORMAL",
              "NORMAL_L",
              "LOW_H",
              "LOW",
              "LOW_L",
              "LOWEST"
            ]
          },
          "eventCreationDate": {
            "type": "string",
            "format": "date-time"
          },
          "callbackServiceURL": {
            "type": "string"
          }
        }
      },
      "ImportReport": {
        "type": "object",
        "properties": {
          "requestUuid": {
            "type": "string",
            "format": "uuid"
          },
          "imported": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "skipped": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportError"
            }
          },
          "warn": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportError"
            }
          }
        }
      },
      "RestResponseImportReport": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ImportReport"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ColleagueTenant": {
        "type": "object",
        "properties": {
          "colleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          }
        }
      },
      "RestResponseListColleagueTenant": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColleagueTenant"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ColleagueChangeEventPayload": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "enum": [
              "Joiner",
              "FutureJoiner",
              "FutureJoinerModification",
              "Leaver",
              "FutureLeaver",
              "FutureLeaverCancelled",
              "Modification",
              "FutureModification",
              "SourceSystemModification",
              "Deletion"
            ]
          },
          "effectiveFrom": {
            "type": "string",
            "format": "date"
          },
          "effectiveTo": {
            "type": "string",
            "format": "date"
          },
          "changedAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previous": {
            "$ref": "#/components/schemas/Colleague"
          },
          "current": {
            "$ref": "#/components/schemas/Colleague"
          },
          "colleagueUUID": {
            "type": "string",
            "format": "uuid"
          },
          "subcategories": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "newJoiner",
                "importedInCF",
                "reinstatement",
                "departmentUpdate",
                "jobUpdate",
                "positionUpdate",
                "profileUpdate",
                "contactUpdate",
                "skillsUpdate",
                "externalSystemsUpdate",
                "contractUpdate",
                "workRelationshipUpdate",
                "other",
                "sourceSystemUpdate"
              ]
            }
          }
        }
      },
      "RestResponseUser": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/User"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "colleague": {
            "$ref": "#/components/schemas/Colleague"
          },
          "profileAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnersTypedAttributeUUID"
            }
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RestResponseListTip": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tip"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListReviewNote": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewNote"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "PercentageCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "percentage": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportStatistics": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "statistics": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PercentageCount"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RestResponseListReportStatistics": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportStatistics"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ColleagueReportTargeting": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "businessType": {
            "type": "string"
          },
          "lineManager": {
            "$ref": "#/components/schemas/ColleagueSimple"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RestResponseListColleagueReportTargeting": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColleagueReportTargeting"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseMapStringString": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseInteger": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ProcessInfo": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "resourceName": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "deploymentId": {
            "type": "string"
          },
          "versionTag": {
            "type": "string"
          },
          "diagramResourceName": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          }
        }
      },
      "RestResponseListProcessInfo": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessInfo"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponsePMCycleMetadata": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/PMCycleMetadata"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "CompositePMCycleResponse": {
        "type": "object",
        "properties": {
          "cycle": {
            "$ref": "#/components/schemas/PMCycle"
          },
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PMForm"
            }
          }
        }
      },
      "PMForm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"]
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "key": {
            "type": "string"
          },
          "json": {
            "type": "string"
          }
        }
      },
      "RestResponseCompositePMCycleResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/CompositePMCycleResponse"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseSetString": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseMapUUIDString": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "CompositePMCycleMetadataResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PMCycleMetadata"
          },
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PMForm"
            }
          }
        }
      },
      "RestResponseCompositePMCycleMetadataResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/CompositePMCycleMetadataResponse"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListPMCycle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PMCycle"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "PDPResponse": {
        "type": "object",
        "properties": {
          "goals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PDPGoal"
            }
          },
          "form": {
            "$ref": "#/components/schemas/PMFormElement"
          }
        }
      },
      "RestResponsePDPResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/PDPResponse"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseLocalDate": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "string",
            "format": "date"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListOrganisationDictionary": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganisationDictionary"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "OrgHierarchy": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "functions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            }
          }
        }
      },
      "RestResponseOrgHierarchy": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/OrgHierarchy"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListNote": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListFolder": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ColleagueView": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "businessType": {
            "type": "string"
          },
          "lineManager": {
            "$ref": "#/components/schemas/ColleagueSimple"
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplifiedReview"
            }
          },
          "timeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelinePoint"
            }
          }
        }
      },
      "RestResponseListColleagueView": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColleagueView"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "SimplifiedReview": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["OBJECTIVE", "MYR", "EYR", "QUARTER", "CALIBRATION"]
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "DECLINED",
              "WAITING_FOR_COMPLETION",
              "REQUESTED_TO_AMEND",
              "COMPLETED"
            ]
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "tlPointUuid": {
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TimelinePoint": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "colleagueCycleUuid": {
            "type": "string",
            "format": "uuid"
          },
          "cycleUuid": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"]
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "properties": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": ["COMPLETED", "OVERDUE", "STARTED", "NOT_STARTED", "FINISHING", "SCHEDULED"]
          },
          "summaryStatus": {
            "type": "string"
          },
          "reviewType": {
            "type": "string",
            "enum": ["OBJECTIVE", "MYR", "EYR", "QUARTER", "CALIBRATION"]
          },
          "lastUpdatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "statistics": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Health": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["SERVICE", "COMPONENT", "DEPENDENCY"]
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["Ok", "Fail", "Degraded"]
          },
          "version": {
            "type": "string"
          },
          "checked": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "RestResponseFile": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/File"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListGeneralDictionaryItem": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralDictionaryItem"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseGeneralDictionaryItem": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/GeneralDictionaryItem"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListDeploymentInfo": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentInfo"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "DecisionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "resourceName": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "deploymentId": {
            "type": "string"
          },
          "versionTag": {
            "type": "string"
          },
          "diagramResourceName": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          }
        }
      },
      "RestResponseListDecisionInfo": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecisionInfo"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ConfigEntryResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GeneralDictionaryItem"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "root": {
            "type": "boolean"
          },
          "compositeKey": {
            "type": "string"
          }
        }
      },
      "RestResponseListConfigEntryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigEntryResponse"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseConfigEntryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ConfigEntryResponse"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ColleagueEntity": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "workLevel": {
            "$ref": "#/components/schemas/WorkLevel"
          },
          "primaryEntity": {
            "$ref": "#/components/schemas/PrimaryEntity"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "salaryFrequency": {
            "type": "string"
          },
          "job": {
            "$ref": "#/components/schemas/Job"
          },
          "iamSource": {
            "type": "string"
          },
          "iamId": {
            "type": "string"
          },
          "managerUuid": {
            "type": "string",
            "format": "uuid"
          },
          "employmentType": {
            "type": "string"
          },
          "hireDate": {
            "type": "string",
            "format": "date"
          },
          "leavingDate": {
            "type": "string",
            "format": "date"
          },
          "manager": {
            "type": "boolean"
          },
          "locationId": {
            "type": "string"
          },
          "legalEntity": {
            "$ref": "#/components/schemas/LegalEntity"
          },
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Skill"
            }
          },
          "colleagueType": {
            "type": "string",
            "enum": ["EMPLOYEE", "EXTERNAL", "CONTRACTOR"]
          },
          "lastUpdatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "md5sum": {
            "type": "string"
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "PrimaryEntity": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RestResponseListColleagueEntity": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColleagueEntity"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "WorkLevel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "RestResponseColleagueProfile": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ColleagueProfile"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListTimelinePoint": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelinePoint"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseBoolean": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "PMColleagueCycle": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "colleagueUuid": {
            "type": "string",
            "format": "uuid"
          },
          "cycleUuid": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "COMPLETED",
              "DRAFT",
              "FAILED",
              "REGISTERED",
              "STARTED",
              "SUSPENDED",
              "TERMINATED",
              "SCHEDULED",
              "FINISHING",
              "FINISHED"
            ]
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "properties": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RestResponseListPMColleagueCycle": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PMColleagueCycle"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListColleagueProfile": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColleagueProfile"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ImportRequest": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "fileName": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["REGISTERED", "IN_PROGRESS", "PROCESSED", "FAILED"]
          },
          "createdBy": {
            "type": "string"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RestResponseImportRequest": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ImportRequest"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListImportError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportError"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseMapStringListContentEntry": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContentEntry"
              }
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListContentEntry": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentEntry"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseMapStringTotalCount": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TotalCount"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "TotalCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "percentage": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RestResponseListCalibrationSession": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalibrationSession"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ColleagueReview": {
        "type": "object",
        "properties": {
          "colleague": {
            "$ref": "#/components/schemas/ColleagueSimple"
          },
          "review": {
            "$ref": "#/components/schemas/Review"
          }
        }
      },
      "RestResponseListColleagueReview": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColleagueReview"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "RestResponseListColleagueSimple": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColleagueSimple"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ColleagueFilterOptions": {
        "type": "object",
        "properties": {
          "functions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            }
          },
          "departments": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Department"
            }
          },
          "countries": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          },
          "legal-entities": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalEntity"
            }
          },
          "business-groups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessGroup"
            }
          },
          "line-managers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColleagueSimple"
            }
          },
          "work-levels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkLevel"
            }
          }
        }
      },
      "RestResponseColleagueFilterOptions": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ColleagueFilterOptions"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "CalibrationColleague": {
        "type": "object",
        "properties": {
          "colleague": {
            "$ref": "#/components/schemas/ColleagueSimple"
          },
          "sessionUuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "RestResponseListCalibrationColleague": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalibrationColleague"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "AuditOrgObjectiveReport": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "$ref": "#/components/schemas/ColleagueSimple"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "action": {
            "type": "string",
            "enum": ["SAVE_AS_DRAFT", "PUBLISH", "UNPUBLISH"]
          }
        }
      },
      "RestResponseListAuditOrgObjectiveReport": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditOrgObjectiveReport"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "OverallHealth": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Fail", "Degraded"]
          },
          "version": {
            "type": "string"
          },
          "component": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Health"
            }
          }
        }
      },
      "EnvironmentHealth": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Fail", "Degraded"]
          },
          "version": {
            "type": "string"
          },
          "build": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "os": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "responses": {
      "BAD_REQUEST": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponseVoid"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "CONSTRAINT_VIOLATION",
                  "message": "Constraint violation",
                  "details": [
                    {
                      "message": "must not be blank",
                      "field": "param_name"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "UNAUTHORIZED": {
        "description": "Unauthorized",
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "description": "https://tools.ietf.org/html/rfc6750#section-3.1",
              "example": "Bearer error=\"invalid_token\", error_description=\"Provided token isn't active\", error_uri=\"https://tools.ietf.org/html/rfc6750#section-3.1\""
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponseVoid"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "UNAUTHENTICATED",
                  "message": "Authentication failed",
                  "details": [
                    {
                      "message": "Detailed auth error message",
                      "target": "auth-provider-name"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "FORBIDDEN": {
        "description": "Forbidden",
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "description": "https://tools.ietf.org/html/rfc6750#section-3.1",
              "example": "Bearer error=\"insufficient_scope\", error_description=\"The request requires higher privileges than provided by the access token.\", error_uri=\"https://tools.ietf.org/html/rfc6750#section-3.1\""
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponseVoid"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "ACCESS_DENIED",
                  "message": "Access is denied"
                }
              ]
            }
          }
        }
      },
      "INTERNAL_SERVER_ERROR": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponseVoid"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "ER_CODE_UNEXPECTED_EXCEPTION",
                  "message": "Unexpected internal service error"
                }
              ]
            }
          }
        }
      },
      "NOT_FOUND": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RestResponseVoid"
            },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "ENTITY_NOT_FOUND",
                  "message": "Entity was not found for parameter"
                }
              ]
            }
          }
        }
      }
    }
  }
}
