{
  "openapi": "3.0.1",
  "info": { "title": "PMA API", "description": "Documentation PMA API v1.0", "version": "1.0" },
  "servers": [{ "url": "http://frontend.dev.pma.tescocloud.com/v1", "description": "Generated server url" }],
  "security": [{ "bearer-jwt-identity": [] }, { "additional-auth-jwt": [] }],
  "paths": {
    "/files": {
      "get": {
        "tags": ["file"],
        "summary": "Get Files information with the latest version applying search, filter and sorting",
        "description": "Get Files information with the latest version applying search, filter and sorting",
        "operationId": "get",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RequestQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found filtered files data",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListFile" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["file"],
        "summary": "Upload Files",
        "description": "Upload Files",
        "operationId": "upload",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "uploadMetadata": { "type": "string", "format": "binary" },
                  "files": { "type": "array", "items": { "type": "string", "format": "binary" } }
                }
              },
              "encoding": {
                "uploadMetadata": { "contentType": "application/json" },
                "files": { "contentType": "application/octet-stream" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Uploaded file",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListFile" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/requests/{requestUuid}/errors": {
      "get": {
        "tags": ["profile"],
        "summary": "Get import request errors by request uuid",
        "operationId": "getImportRequestErrors",
        "parameters": [
          { "name": "requestUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Request errors found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListImportError" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/deployments": {
      "get": {
        "tags": ["deployment-endpoint"],
        "operationId": "deployments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListDeploymentInfo" } }
            }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["deployment-endpoint"],
        "operationId": "deploy",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "deploymentName": { "type": "string", "format": "string" },
                  "files": { "type": "array", "items": { "type": "string", "format": "binary" } }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseDeploymentInfo" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["deployment-endpoint"],
        "operationId": "undeployByName",
        "parameters": [{ "name": "name", "in": "query", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListDeploymentInfo" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/reviews/files/{fileUuid}/download": {
      "get": {
        "tags": ["review"],
        "summary": "Download Review File",
        "description": "Download Review File",
        "operationId": "download",
        "parameters": [
          { "name": "fileUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Review File downloaded",
            "content": { "*/*": { "schema": { "type": "string", "format": "binary" } } }
          },
          "400": { "description": "Invalid id supplied" },
          "404": { "description": "Review File not found", "content": { "application/octet-stream": {} } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/pm-cycles/": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get all performance cycles",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RequestQuery" }
          },
          {
            "name": "includeMetadata",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "Found all performance cycles with status",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListPMCycle" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/notes/folders/{id}": {
      "put": {
        "tags": ["Notes"],
        "summary": "Update a Folder",
        "operationId": "update_3",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Folder" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Update a Folder",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["Notes"],
        "summary": "Delete a Folder",
        "operationId": "delete",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "201": {
            "description": "Delete a Folder",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/_working": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response in the case that the API Domain is in a healthy working state",
        "operationId": "getWorking",
        "responses": {
          "200": {
            "description": "Return a successful response in the case that the API Domain is in a healthy working state",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Health" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/events": {
      "post": {
        "tags": ["cep"],
        "summary": "Consuming events",
        "description": "Consuming colleague changes events",
        "operationId": "processColleagueChangeEvent",
        "parameters": [{ "name": "FeedId", "in": "header", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ColleagueChangeEventPayload" } }
          },
          "required": true
        },
        "responses": {
          "429": { "description": "Too Many Requests" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-types/{type}/reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of reviews by its cycleUuid, colleagueUuid, review type",
        "operationId": "getReviews",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListReview" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/files/{fileUuid}": {
      "get": {
        "tags": ["file"],
        "summary": "Get File information with the latest version by its uuid",
        "description": "Get File information with the latest version by its uuid",
        "operationId": "get_2",
        "parameters": [
          { "name": "fileUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Found the file data by its uuid",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseFile" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["file"],
        "summary": "Delete existing File by its uuid",
        "description": "Delete existing file",
        "operationId": "delete_1",
        "parameters": [
          { "name": "fileUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "File deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/org-objectives/publish": {
      "put": {
        "tags": ["org-objective"],
        "summary": "Publish organisation objectives",
        "operationId": "publishOrgObjectives",
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Organisation objectives have been published",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListOrgObjective" } }
            }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["org-objective"],
        "summary": "Create and publish organisation objectives",
        "operationId": "createAndPublishOrgObjectives",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/OrgObjective" } }
            }
          },
          "required": true
        },
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Organisation objectives have been published",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListOrgObjective" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pm-cycles": {
      "post": {
        "tags": ["performance-cycle"],
        "summary": "Create performance cycle",
        "description": "Performance cycle created",
        "operationId": "create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PMCycle" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Performance cycle created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePMCycle" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pm-cycles/{uuid}": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get performance cycle by UUID",
        "operationId": "get_3",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          {
            "name": "includeForms",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "Found performance cycle by UUID",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseCompositePMCycleResponse" } }
            }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Updates an existing performance cycle",
        "description": "Performance cycle edited",
        "operationId": "update",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PMCycle" } } },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid UUID",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePMCycle" } } }
          },
          "200": {
            "description": "Performance cycle updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePMCycle" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/config-entries": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get published config entry structure by composite key",
        "operationId": "getPublishedEntryConfigStructureByCompositeKey",
        "parameters": [{ "name": "compositeKey", "in": "query", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListConfigEntryResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["config-entry"],
        "summary": "Create config entry",
        "operationId": "create_4",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConfigEntry" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created config entry",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-types/{type}": {
      "put": {
        "tags": ["review"],
        "summary": "Update list of reviews",
        "description": "Update list of reviews",
        "operationId": "updateReviews",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Review" } } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reviews updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListReview" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/feedbacks/{uuid}": {
      "get": {
        "tags": ["feedback"],
        "summary": "Get feedback by UUID with all items",
        "operationId": "getFeedback",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseFeedback" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "put": {
        "tags": ["feedback"],
        "summary": "Updates an existing feedback",
        "operationId": "updateFeedback",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Feedback" } } },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid UUID",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseFeedback" } } }
          },
          "200": {
            "description": "Feedback updated",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseFeedback" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/notes/folders": {
      "get": {
        "tags": ["Notes"],
        "summary": "Find a Folder by Owner",
        "operationId": "get_1",
        "parameters": [
          { "name": "ownerId", "in": "query", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "201": {
            "description": "Find a folder",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListFolder" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["Notes"],
        "summary": "Create a Folder",
        "operationId": "createFolder",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Folder" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new Folder",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/notes/{id}": {
      "put": {
        "tags": ["Notes"],
        "summary": "Update a Note",
        "operationId": "update_2",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Update a Note",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseNote" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["Notes"],
        "summary": "Delete a Note",
        "operationId": "delete_2",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "201": {
            "description": "Delete a Note",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/processes/{processName}": {
      "delete": {
        "tags": ["deployment-endpoint"],
        "operationId": "undeployProcess",
        "parameters": [{ "name": "processName", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseString" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-types/{type}/numbers/{number}": {
      "get": {
        "tags": ["review"],
        "summary": "Get a review by its cycleUuid, colleagueUuid, review type and number",
        "operationId": "getReview",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] }
          },
          { "name": "number", "in": "path", "required": true, "schema": { "type": "integer", "format": "int32" } }
        ],
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Found the Review",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseReview" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "put": {
        "tags": ["review"],
        "summary": "Update existing review",
        "description": "Update existing review",
        "operationId": "updateReview",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] }
          },
          { "name": "number", "in": "path", "required": true, "schema": { "type": "integer", "format": "int32" } }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Review" } } },
          "required": true
        },
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Review updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseReview" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["review"],
        "summary": "Create a review",
        "description": "Review created",
        "operationId": "createReview",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] }
          },
          { "name": "number", "in": "path", "required": true, "schema": { "type": "integer", "format": "int32" } }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Review" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseReview" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["review"],
        "summary": "Delete existing review",
        "description": "Delete existing review",
        "operationId": "deleteReview",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] }
          },
          { "name": "number", "in": "path", "required": true, "schema": { "type": "integer", "format": "int32" } }
        ],
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Review deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/tips/{uuid}/publish": {
      "patch": {
        "tags": ["tip"],
        "summary": "Publish tip",
        "operationId": "publish",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Tip published successfully.",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseTip" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/reviews/files/{fileUuid}": {
      "delete": {
        "tags": ["review"],
        "summary": "Delete Review File by its uuid",
        "operationId": "delete_3",
        "parameters": [
          { "name": "fileUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Review File deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/users/{colleagueUuid}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by colleague uuid",
        "description": "Get user by colleague uuid",
        "operationId": "getUserByColleagueUuid",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseUser" } } }
          },
          "404": {
            "description": "User not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseUser" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/user-management/accounts": {
      "get": {
        "tags": ["user-management"],
        "summary": "Get users, their status and access levels",
        "description": "Get users, their status and access levels",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "nextPageToken",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          }
        ],
        "responses": {
          "404": {
            "description": "Users, their status and access levels found not found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ExtendedRestResponseListAccount" } }
            }
          },
          "200": {
            "description": "Users, their status and access levels found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ExtendedRestResponseListAccount" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "put": {
        "tags": ["user-management"],
        "summary": "Enable / Disable an account",
        "description": "Enable / Disable an account",
        "operationId": "changeAccountStatus",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ChangeAccountStatusRequest" } }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["user-management"],
        "summary": "Create an Account",
        "description": "Create an Account",
        "operationId": "createAccount",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateAccountRequest" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/config-entries/{entryUuid}": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get published config entry structure by root identifier",
        "operationId": "getPublishedEntryConfigStructure",
        "parameters": [
          { "name": "entryUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseConfigEntryResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "put": {
        "tags": ["config-entry"],
        "summary": "Update config entry",
        "operationId": "update_1",
        "parameters": [
          { "name": "entryUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ConfigEntry" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Updated config entry",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["config-entry"],
        "summary": "Delete config entry",
        "operationId": "delete_6",
        "parameters": [
          { "name": "entryUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Delete config entry",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/organisations/{code}": {
      "get": {
        "tags": ["organisation-dictionary"],
        "summary": "Get organisation dictionary by code",
        "operationId": "findOrganisationDictionary",
        "parameters": [{ "name": "code", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "Found the organisation dictionary",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseOrganisationDictionary" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "put": {
        "tags": ["organisation-dictionary"],
        "summary": "Update organisation dictionary",
        "operationId": "update_4",
        "parameters": [{ "name": "code", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrganisationDictionary" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Updated organisation dictionary",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["organisation-dictionary"],
        "summary": "Delete organisation dictionary",
        "operationId": "delete_7",
        "parameters": [{ "name": "code", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "Deleted organisation dictionary",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/config-entries/colleagues": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get colleagues by composite key",
        "operationId": "findColleaguesByCompositeKey",
        "parameters": [{ "name": "compositeKey", "in": "query", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "Colleagues list",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListColleagueEntity" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/config-entries/roots/unpublished": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get all unpublished root config entries ",
        "operationId": "getUnpublishedRoots",
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListConfigEntryResponse" } }
            }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/feedbacks": {
      "get": {
        "tags": ["feedback"],
        "summary": "Get all feedbacks with all items",
        "operationId": "getAllFeedbacks",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RequestQuery" },
            "example": {
              "_sort": "target-colleague-first-name:DESC,updated-time:ASC",
              "read": "true",
              "colleague-uuid": "10000000-0000-0000-0000-000000000001",
              "target-colleague-uuid_ne": "10000000-0000-0000-0000-000000000002",
              "target-id": "f48c8772-4661-4373-8151-ea89796bb3e6",
              "status_in": ["1", "2"],
              "target-type_nin": ["1", "2"],
              "colleague-first-name_contains": "a",
              "colleague-last-name_ncontains": "Doe",
              "target-colleague-middle-name_contains": "jef",
              "created-time_lt": "2021-11-26T14:18:42.615Z",
              "created-time_lte": "2021-11-26T14:18:42.615Z",
              "updated-time_gt": "2021-11-25T14:36:33.587Z",
              "updated-time_gte": "2021-11-25T14:36:33.587Z",
              "target-id_null": "true",
              "_start": "1",
              "_limit": "7",
              "_search": "first or middle or last target colleague name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseListFeedback" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["feedback"],
        "summary": "Create a new list of feedbacks with items",
        "operationId": "createFeedbacks",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Feedback" } } }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "List of feedbacks created",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseListFeedback" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/dictionaries/{dictionary}/{id}": {
      "get": {
        "tags": ["dictionaries"],
        "summary": "Get dictionary item",
        "operationId": "read",
        "parameters": [
          { "name": "dictionary", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer", "format": "int32" } }
        ],
        "responses": {
          "200": {
            "description": "Found the dictionary item",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseGeneralDictionaryItem" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pdp/goals/{goalUuid}": {
      "get": {
        "tags": ["pdp"],
        "summary": "Get a PDP Goal by its uuid",
        "operationId": "getGoal_1",
        "parameters": [
          { "name": "goalUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Found the PDP Goal",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePDPResponse" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["pdp"],
        "summary": "Delete existing PDP Goal from a Plan by its uuid",
        "description": "Delete existing PDP Goal",
        "operationId": "deleteGoal",
        "parameters": [
          { "name": "goalUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "PDP Goal deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/tips/{uuid}": {
      "get": {
        "tags": ["tip"],
        "summary": "Get tip by uuid",
        "operationId": "read_2",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseTip" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["tip"],
        "summary": "Delete an existing Tip",
        "operationId": "delete_4",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "withHistory", "in": "query", "required": false, "schema": { "type": "boolean" } }
        ],
        "responses": {
          "204": {
            "description": "Tip successfully deleted.",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues": {
      "post": {
        "tags": ["profile"],
        "summary": "Start import colleagues process",
        "operationId": "importColleagues",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "type": "object", "properties": { "file": { "type": "string", "format": "binary" } } },
              "encoding": { "file": { "contentType": "application/octet-stream" } }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Colleagues was imported",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseImportReport" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pm-cycles/{uuid}/statuses/{status}": {
      "patch": {
        "tags": ["performance-cycle"],
        "summary": "Update performance cycle status",
        "operationId": "updateStatus",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "COMPLETED",
                "DRAFT",
                "FAILED",
                "REGISTERED",
                "STARTED",
                "SUSPENDED",
                "TERMINATED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated performance cycle  status",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePMCycle" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/processes/metadata": {
      "get": {
        "tags": ["processes"],
        "summary": "Get process metadata by process key, e.g., TYPE_1, TYPE_2, TYPE_4",
        "operationId": "getMetadata",
        "parameters": [{ "name": "process-key", "in": "query", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "Found the process metadata",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePMCycleMetadata" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/reviews/files": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of reviews by colleagueUuid",
        "operationId": "getReviewsFilesByColleague",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListFile" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": ["Notes"],
        "summary": "Find Notes by Owner",
        "operationId": "findByFolder_1",
        "parameters": [
          { "name": "folderId", "in": "query", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "ownerId", "in": "query", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "201": {
            "description": "Find Note",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListNote" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["Notes"],
        "summary": "Create a Note",
        "operationId": "createNote",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new Note",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseNote" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-types/objective/sharing": {
      "get": {
        "tags": ["objective-sharing"],
        "summary": "Check if colleague objectives is shared",
        "operationId": "isColleagueShareObjectives",
        "parameters": [
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Info about sharing objectives",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseBoolean" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["objective-sharing"],
        "summary": "Share colleague objectives",
        "operationId": "shareObjectives",
        "parameters": [
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Objectives sharing have been enabled",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["objective-sharing"],
        "summary": "Stop sharing colleague objectives",
        "operationId": "stopSharingObjectives",
        "parameters": [
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Objectives sharing have been disabled",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/_ready": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response if this instance is able to receive traffic",
        "operationId": "getReady",
        "responses": {
          "200": {
            "description": "Return a successful response if this node is able to receive traffic",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Health" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/managers/{managerUuid}/reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of colleagues reviews by managerUuid",
        "operationId": "getTeamView",
        "parameters": [
          { "name": "managerUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListColleagueView" } }
            }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/events": {
      "post": {
        "tags": ["spring-rest-event-listener"],
        "operationId": "handle",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Event" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "OK" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/files/versions": {
      "get": {
        "tags": ["file"],
        "summary": "Get all information about File with All Versions by its name and path",
        "description": "Get all information about File with All Versions by its name and path",
        "operationId": "getAllVersions",
        "parameters": [
          { "name": "path", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "fileName", "in": "query", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Found the file data of all versions by path and name",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListFile" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["file"],
        "summary": "Delete existing Files by its path, name and versions",
        "description": "Delete existing files",
        "operationId": "delete_5",
        "parameters": [
          { "name": "path", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "fileName", "in": "query", "required": true, "schema": { "type": "string" } },
          {
            "name": "versions",
            "in": "query",
            "required": true,
            "schema": { "type": "array", "items": { "type": "integer", "format": "int32" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Files deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/organisations": {
      "get": {
        "tags": ["organisation-dictionary"],
        "summary": "Get all organisation dictionaries",
        "operationId": "findAllOrganisationDictionaries",
        "responses": {
          "200": {
            "description": "List of organisation dictionaries",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RestResponseListOrganisationDictionary" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["organisation-dictionary"],
        "summary": "Create organisation dictionary",
        "operationId": "create_2",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrganisationDictionary" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created organisation dictionary",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseOrganisationDictionary" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/cms/help-faq-urls": {
      "get": {
        "tags": ["CMS"],
        "summary": "Find URLs by keys",
        "operationId": "getHelpFaqUrls",
        "parameters": [
          {
            "name": "keys",
            "in": "query",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Find URLs by keys",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseMapStringString" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/suggestions": {
      "get": {
        "tags": ["colleagues"],
        "summary": "Autocomplete search among colleagues by full name and manager ID",
        "operationId": "getSuggestions",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RequestQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search among colleagues by full name and manager ID",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListColleagueProfile" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/review-types/objective/sharing": {
      "get": {
        "tags": ["objective-sharing"],
        "summary": "Get all shared objectives by their manager",
        "operationId": "getSharedObjectivesForColleague",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Shared objectives",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListReview" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/reports/overall-rating": {
      "get": {
        "tags": ["rating"],
        "summary": "Get overall rating",
        "operationId": "overall",
        "parameters": [
          { "name": "what_rating", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "how_rating", "in": "query", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Rating calculated",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseMapStringString" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pdp/goals/numbers/{number}": {
      "get": {
        "tags": ["pdp"],
        "summary": "Get a PDP Goal by its colleague and number",
        "operationId": "getGoal",
        "parameters": [
          { "name": "number", "in": "path", "required": true, "schema": { "type": "integer", "format": "int32" } }
        ],
        "responses": {
          "200": {
            "description": "Found the PDP Goal",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePDPResponse" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/reports/linked-objective-report": {
      "get": {
        "tags": ["report"],
        "summary": "Get a Linked Objectives Report Data by year of cycle and statuses of review",
        "operationId": "getLinkedObjectivesReportData",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RequestQuery" }
          }
        ],
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Found the Report data",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseReport" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pdp/goals": {
      "get": {
        "tags": ["pdp"],
        "summary": "Get a list of PDP Goals by its colleague",
        "operationId": "getGoals",
        "responses": {
          "200": {
            "description": "Found the PDP Goals",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePDPResponse" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "put": {
        "tags": ["pdp"],
        "summary": "Update a PDP",
        "description": "PDP updated",
        "operationId": "update_5",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/PDPGoal" } } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PDP updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListPDPGoal" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["pdp"],
        "summary": "Create a PDP",
        "description": "PDP created",
        "operationId": "create_1",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/PDPGoal" } } }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListPDPGoal" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/user-management/roles": {
      "get": {
        "tags": ["user-management"],
        "summary": "Get available access levels & metadata",
        "description": "Available access levels & metadata",
        "operationId": "getRoles",
        "responses": {
          "200": {
            "description": "Available access levels & metadata found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListRole" } } }
          },
          "404": {
            "description": "Available access levels & metadata not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListRole" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["user-management"],
        "summary": "Add access to an account",
        "description": "Add access to an account",
        "operationId": "grantRole",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RoleRequest" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["user-management"],
        "summary": "Remove access from an account",
        "description": "Remove access from an account",
        "operationId": "revokeRole",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RoleRequest" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/reviews/{uuid}": {
      "get": {
        "tags": ["review"],
        "summary": "Get a review by its identifier",
        "operationId": "getReviewByUuid",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Found the Review",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseReview" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/hc": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response if this instance is able to receive traffic",
        "operationId": "getHc",
        "responses": {
          "200": {
            "description": "Return a successful response if this node is able to receive traffic",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Health" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/_healthcheck": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return the status of API domain and all its components and dependencies",
        "operationId": "getOverallHealthCheck",
        "responses": {
          "200": {
            "description": "Return the status of API domain and all its components, dependencies",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OverallHealth" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/org-objectives": {
      "get": {
        "tags": ["org-objective"],
        "summary": "Get all organisation objectives",
        "operationId": "getOrgObjectives",
        "responses": {
          "200": {
            "description": "Found organisation objectives",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListOrgObjective" } }
            }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["org-objective"],
        "summary": "Create new organisation objectives",
        "description": "Organisation objectives created",
        "operationId": "createOrgObjectives",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/OrgObjective" } }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListOrgObjective" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/review-types/{type}/statuses/{status}": {
      "put": {
        "tags": ["review"],
        "summary": "Update status of existing reviews",
        "description": "Update status of existing reviews",
        "operationId": "updateReviewsStatus",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] }
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "WAITING_FOR_APPROVAL",
                "APPROVED",
                "DECLINED",
                "COMPLETED",
                "OVERDUE",
                "STARTED",
                "NOT_STARTED",
                "NOT_CREATED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateReviewsStatusRequest" } }
          },
          "required": true
        },
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Reviews status updated",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePMTimelinePointStatus" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/config/default/attributes/colleagues/{colleagueUuid}": {
      "put": {
        "tags": ["Config"],
        "summary": "Update default attributes for a colleague",
        "operationId": "updateDefaultAttributes",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Update default attributes for a colleague",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/processes": {
      "get": {
        "tags": ["deployment-endpoint"],
        "operationId": "processes",
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListString" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/metadata": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get full metadata for colleague",
        "operationId": "getMetadataByColleague",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          {
            "name": "includeForms",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the cycle metadata",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RestResponseCompositePMCycleMetadataResponse" }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/attributes": {
      "put": {
        "tags": ["profile"],
        "summary": "Update existing profile attributes",
        "description": "Update existing profile attributes",
        "operationId": "updateProfileAttributes",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/TypedAttribute" } }
            }
          },
          "required": true
        },
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Profile attributes updated",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListTypedAttribute" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["profile"],
        "summary": "Create new profile attributes",
        "description": "Profile attributes created",
        "operationId": "createProfileAttributes",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/TypedAttribute" } }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListTypedAttribute" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["profile"],
        "summary": "Delete existing profile attributes",
        "description": "Delete existing profile attributes",
        "operationId": "deleteProfileAttributes",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/TypedAttribute" } }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profile attributes deleted",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListTypedAttribute" } }
            }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/managers/{managerUuid}/full-team-reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of full team reviews by managerUuid",
        "operationId": "getFullTeamView",
        "parameters": [
          { "name": "managerUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListColleagueView" } }
            }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pm-cycles/{uuid}/start": {
      "put": {
        "tags": ["performance-cycle"],
        "summary": "Start performance cycle",
        "description": "Performance cycle started",
        "operationId": "start",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Performance cycle started",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/requests/{requestUuid}": {
      "get": {
        "tags": ["profile"],
        "summary": "Get import request by uuid",
        "operationId": "getImportRequest",
        "parameters": [
          { "name": "requestUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "404": {
            "description": "Request not found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseImportRequest" } }
            }
          },
          "200": {
            "description": "Request found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseImportRequest" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/timeline": {
      "get": {
        "tags": ["review"],
        "summary": "Get cycle timeline for colleague",
        "operationId": "getTimelineByColleague",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Found the cycle timeline",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListTimelinePoint" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/live": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a successful response in the case that the API Domain is in a healthy working state",
        "operationId": "getLive",
        "responses": {
          "200": {
            "description": "Return a successful response in the case that the API Domain is in a healthy working state",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Health" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/reports/linked-objective-report/formats/excel": {
      "get": {
        "tags": ["report"],
        "summary": "Get a Linked Objectives Report by year of cycle and statuses of review",
        "operationId": "getLinkedObjectivesReportFile",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RequestQuery" }
          }
        ],
        "responses": {
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "200": {
            "description": "Found the Report data",
            "content": { "application/json": { "schema": { "type": "string", "format": "binary" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/feedbacks/{uuid}/read": {
      "put": {
        "tags": ["feedback"],
        "summary": "Mark an existing feedback as read",
        "operationId": "markAsRead",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "204": {
            "description": "Mark as read successfully",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseVoid" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pm-cycles/files/{uuid}/metadata": {
      "get": {
        "tags": ["performance-cycle"],
        "summary": "Get performance cycle metadata by file UUID",
        "operationId": "getPmCycleMetadata",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          {
            "name": "includeForms",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "responses": {
          "200": {
            "description": "Found performance cycle metadata by file UUID",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RestResponseCompositePMCycleMetadataResponse" }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "500": {
            "description": "Exception while parsing a form",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RestResponseCompositePMCycleMetadataResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" }
        }
      }
    },
    "/config-entries/{entryUuid}/publish": {
      "post": {
        "tags": ["config-entry"],
        "summary": "Publish config entry",
        "operationId": "publishEntryConfigStructure",
        "parameters": [
          { "name": "entryUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Structure has been published",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "delete": {
        "tags": ["config-entry"],
        "summary": "Unpublish config entry",
        "operationId": "unpublishEntryConfigStructure",
        "parameters": [
          { "name": "entryUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Structure has been unpublished",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseObject" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/config-entries/{entryUuid}/unpublished": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get unpublished config entry structure by root identifier",
        "operationId": "getUnpublishedEntryConfigStructure",
        "parameters": [
          { "name": "entryUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseConfigEntryResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/files/{fileUuid}/download": {
      "get": {
        "tags": ["file"],
        "summary": "Download File",
        "description": "Download File",
        "operationId": "download_1",
        "parameters": [
          { "name": "fileUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "File downloaded",
            "content": { "*/*": { "schema": { "type": "string", "format": "binary" } } }
          },
          "400": { "description": "Invalid id supplied" },
          "404": { "description": "File not found", "content": { "application/octet-stream": {} } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/dictionaries/{dictionary}": {
      "get": {
        "tags": ["dictionaries"],
        "summary": "Get dictionary items",
        "operationId": "findAll",
        "parameters": [
          { "name": "dictionary", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "code", "in": "query", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "List of the dictionary items",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseListGeneralDictionaryItem" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pdp/template": {
      "get": {
        "tags": ["pdp"],
        "summary": "Download PDP template file",
        "description": "Download PDP template file",
        "operationId": "downloadTemplate",
        "responses": {
          "200": {
            "description": "File downloaded",
            "content": { "*/*": { "schema": { "type": "string", "format": "binary" } } }
          },
          "400": { "description": "Invalid id supplied" },
          "404": { "description": "File not found", "content": { "application/octet-stream": {} } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
    "/colleagues/{colleagueUuid}": {
      "get": {
        "tags": ["profile"],
        "summary": "Get profile by colleague uuid",
        "description": "Get profile by colleague uuid",
        "operationId": "getProfileByColleagueUuid",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Profile found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseColleagueProfile" } }
            }
          },
          "404": {
            "description": "Profile not found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseColleagueProfile" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/processes/archive": {
      "post": {
        "tags": ["deployment-endpoint"],
        "operationId": "deployProcess",
        "requestBody": { "content": { "text/plain": { "schema": { "type": "string" } } }, "required": true },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseDeploymentInfo" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/tips/{uuid}/history": {
      "get": {
        "tags": ["tip"],
        "summary": "Get tip history",
        "operationId": "readHistory",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseListTip" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/tips": {
      "get": {
        "tags": ["tip"],
        "summary": "Get tips",
        "operationId": "read_1",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RequestQuery" },
            "example": {
              "_sort": "title:DESC,updated-time:ASC",
              "published": "true",
              "organization-key_ne": "l1/group/l2/ho_c/l3/salaried/l4/wl5/#v1",
              "title_contains": "A",
              "description_ncontains": "B",
              "key_in": ["com.tesco.pma.tip", "com.tesco.pma.review"],
              "organization-name_nin": ["WL1", "WL2"],
              "created-time_lt": "2021-11-26T14:18:42.615Z",
              "created-time_lte": "2021-11-26T14:18:42.615Z",
              "updated-time_gt": "2021-11-25T14:36:33.587Z",
              "updated-time_gte": "2021-11-25T14:36:33.587Z",
              "organization-name_null": "true",
              "_start": "1",
              "_limit": "7",
              "_search": "A"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseListTip" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      },
      "post": {
        "tags": ["tip"],
        "summary": "Create a new tip or create a new version of an existing tip",
        "operationId": "create_3",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Tip" } } },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New Tip successfully created.",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseTip" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pm-cycles/publish": {
      "post": {
        "tags": ["performance-cycle"],
        "summary": "Publish performance cycle",
        "description": "Performance cycle published",
        "operationId": "publish_1",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PMCycle" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SPerformance cycle published",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponsePMCycle" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/users/iam-ids/{iamId}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by iam id (TPX)",
        "description": "Get user by iam id (TPX)",
        "operationId": "getUserByIamId",
        "parameters": [{ "name": "iamId", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "User found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseUser" } } }
          },
          "404": {
            "description": "User not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseUser" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/pm-cycles/{uuid}/deploy": {
      "post": {
        "tags": ["performance-cycle"],
        "summary": "Deploy performance cycle",
        "description": "Performance cycle deployed",
        "operationId": "deploy_1",
        "parameters": [
          { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } }
        ],
        "responses": {
          "200": {
            "description": "Performance cycle deployed",
            "content": { "*/*": { "schema": { "$ref": "#/components/schemas/RestResponseUUID" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/deployments/{id}": {
      "delete": {
        "tags": ["deployment-endpoint"],
        "operationId": "undeploy",
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListDeploymentInfo" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/_status": {
      "get": {
        "tags": ["diagnostic"],
        "summary": "Return a summary of the health check results for API Domain",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Return a summary of the health check results",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Health" } } }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/colleagues/{colleagueUuid}/pm-cycles/{cycleUuid}/reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get a list of reviews by its cycleUuid, colleagueUuid",
        "operationId": "getReviewsByColleague",
        "parameters": [
          { "name": "colleagueUuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } },
          { "name": "cycleUuid", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Found reviews",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListReview" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/config-entries/unpublished": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get unpublished structure by composite key",
        "operationId": "getUnpublished",
        "parameters": [{ "name": "compositeKey", "in": "query", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListConfigEntryResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["user"],
        "summary": "Get me",
        "description": "Get user info for current authenticated user",
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "User found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseUser" } } }
          },
          "404": {
            "description": "User not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseUser" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/files/last": {
      "get": {
        "tags": ["file"],
        "summary": "Get Files information with the latest version by file name and path",
        "description": "Get Files information with the latest version by file name and path",
        "operationId": "get_4",
        "parameters": [
          { "name": "path", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "fileName", "in": "query", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Found the file data by its path and name",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseFile" } } }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/org-objectives/published": {
      "get": {
        "tags": ["org-objective"],
        "summary": "Get published organisation objectives",
        "operationId": "getPublishedOrgObjectives",
        "responses": {
          "200": {
            "description": "Found organisation objectives",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListOrgObjective" } }
            }
          },
          "404": { "$ref": "#/components/responses/NOT_FOUND" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/reviews/files": {
      "post": {
        "tags": ["review"],
        "summary": "Upload Review Files",
        "description": "Upload Review Files",
        "operationId": "upload_1",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "uploadMetadata": { "type": "string", "format": "binary" },
                  "files": { "type": "array", "items": { "type": "string", "format": "binary" } }
                }
              },
              "encoding": {
                "uploadMetadata": { "contentType": "application/json" },
                "files": { "contentType": "application/octet-stream" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Uploaded review file",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListFile" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/config-entries/roots": {
      "get": {
        "tags": ["config-entry"],
        "summary": "Get all published root config entries ",
        "operationId": "getPublishedRoots",
        "responses": {
          "200": {
            "description": "Found the config entry structure",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseListConfigEntryResponse" } }
            }
          },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/audit-logs": {
      "get": {
        "tags": ["org-objective"],
        "summary": "Get audit log of organisation objective actions",
        "operationId": "getAuditLogReport",
        "parameters": [
          {
            "name": "requestQuery",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RequestQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found audit log data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RestResponseListAuditOrgObjectiveReport" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    },
    "/processes/keys/{process-key}": {
      "post": {
        "tags": ["processes"],
        "summary": "Run process metadata by process key with parameters",
        "operationId": "runProcessByKey",
        "parameters": [
          { "name": "process-key", "in": "path", "required": true, "schema": { "type": "string" } },
          {
            "name": "params",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": { "type": "object" },
            "example": { "p1": "v1", "p2": "v2" }
          }
        ],
        "responses": {
          "200": {
            "description": "Started process identifier",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RestResponseString" } } }
          },
          "400": { "$ref": "#/components/responses/BAD_REQUEST" },
          "401": { "$ref": "#/components/responses/UNAUTHORIZED" },
          "403": { "$ref": "#/components/responses/FORBIDDEN" },
          "500": { "$ref": "#/components/responses/INTERNAL_SERVER_ERROR" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Condition": {
        "type": "object",
        "properties": {
          "property": { "type": "string" },
          "operand": {
            "type": "string",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "CONTAINS",
              "NOT_CONTAINS",
              "IN",
              "NOT_IN",
              "LESS_THAN",
              "LESS_THAN_EQUALS",
              "GREATER_THAN",
              "GREATER_THAN_EQUALS",
              "LIKE",
              "NULL"
            ]
          },
          "value": { "type": "object" }
        }
      },
      "RequestQuery": {
        "type": "object",
        "properties": {
          "sort": { "type": "array", "items": { "$ref": "#/components/schemas/Sort" } },
          "filters": { "type": "array", "items": { "$ref": "#/components/schemas/Condition" } },
          "_start": { "type": "integer", "format": "int32" },
          "_limit": { "type": "integer", "format": "int32" },
          "_search": { "type": "string" },
          "_sort": { "type": "string", "writeOnly": true }
        },
        "example": {
          "_sort": "field1:DESC,field2:ASC",
          "field1": "A",
          "field2_ne": "5",
          "field3_contains": "A",
          "field4_ncontains": "B",
          "field5_in": ["A", "B"],
          "field6_in[0]": "A",
          "field6_in[1]": "B",
          "field6_in[2]": "C",
          "field7_nin": ["C", "D"],
          "field8_lt": "5",
          "field9_lte": "5",
          "field10_gt": "5",
          "field11_gte": "5",
          "field12_null": "true",
          "_start": "1",
          "_limit": "7",
          "_search": "A"
        }
      },
      "Sort": {
        "type": "object",
        "properties": { "field": { "type": "string" }, "order": { "type": "string", "enum": ["ASC", "DESC"] } }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "code": { "type": "string" },
          "message": { "type": "string" },
          "target": { "type": "string" },
          "details": { "type": "array", "items": { "$ref": "#/components/schemas/ErrorDetail" } }
        }
      },
      "ErrorDetail": {
        "type": "object",
        "properties": { "code": { "type": "string" }, "message": { "type": "string" } }
      },
      "File": {
        "type": "object",
        "properties": {
          "path": { "type": "string" },
          "fileName": { "type": "string" },
          "type": { "$ref": "#/components/schemas/FileType" },
          "status": { "type": "string", "enum": ["DRAFT", "ACTIVE", "INACTIVE"] },
          "description": { "type": "string" },
          "fileDate": { "type": "string", "format": "date-time" },
          "uuid": { "type": "string", "format": "uuid" },
          "version": { "type": "integer", "format": "int32" },
          "fileLength": { "type": "integer", "format": "int32" },
          "createdBy": { "type": "string", "format": "uuid" },
          "createdTime": { "type": "string", "format": "date-time" },
          "fileContent": { "type": "array", "items": { "type": "string", "format": "byte" } }
        }
      },
      "FileType": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "code": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "RestResponseListFile": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/File" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ImportError": {
        "type": "object",
        "properties": {
          "requestUuid": { "type": "string", "format": "uuid" },
          "colleagueUuid": { "type": "string", "format": "uuid" },
          "code": { "type": "string" },
          "message": { "type": "string" }
        }
      },
      "RestResponseListImportError": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/ImportError" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "DeploymentInfo": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "id": { "type": "string" },
          "deploymentTime": { "type": "string", "format": "date-time" },
          "tenantId": { "type": "string" },
          "source": { "type": "string" }
        }
      },
      "RestResponseDeploymentInfo": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/DeploymentInfo" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ColleagueSimple": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "firstName": { "type": "string" },
          "middleName": { "type": "string" },
          "lastName": { "type": "string" },
          "jobName": { "type": "string" },
          "businessType": { "type": "string" },
          "lineManager": { "$ref": "#/components/schemas/ColleagueSimple" }
        }
      },
      "PMCycle": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "entryConfigKey": { "type": "string" },
          "template": { "$ref": "#/components/schemas/File" },
          "name": { "type": "string" },
          "createdBy": { "$ref": "#/components/schemas/ColleagueSimple" },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "COMPLETED",
              "DRAFT",
              "FAILED",
              "REGISTERED",
              "STARTED",
              "SUSPENDED",
              "TERMINATED"
            ]
          },
          "type": { "type": "string", "enum": ["FISCAL", "HIRING"] },
          "startTime": { "type": "string", "format": "date-time" },
          "endTime": { "type": "string", "format": "date-time" },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "metadata": { "$ref": "#/components/schemas/PMCycleMetadata" }
        }
      },
      "PMCycleElement": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "description": { "type": "string" },
          "type": { "type": "string", "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"] },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "cycleType": { "type": "string", "enum": ["FISCAL", "HIRING"] },
          "timelinePoints": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/PMTimelinePointElement" },
                { "$ref": "#/components/schemas/PMReviewElement" }
              ]
            }
          }
        }
      },
      "PMCycleMetadata": {
        "type": "object",
        "properties": { "cycle": { "$ref": "#/components/schemas/PMCycleElement" } }
      },
      "PMFormElement": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "description": { "type": "string" },
          "type": { "type": "string", "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"] },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "key": { "type": "string" }
        }
      },
      "PMReviewElement": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/PMTimelinePointElement" },
          {
            "type": "object",
            "properties": {
              "reviewType": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] },
              "form": { "$ref": "#/components/schemas/PMFormElement" }
            }
          }
        ]
      },
      "PMTimelinePointElement": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "description": { "type": "string" },
          "type": { "type": "string", "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"] },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } }
        },
        "discriminator": { "propertyName": "type" }
      },
      "RestResponseListPMCycle": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/PMCycle" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseObject": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "object" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "Health": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "type": { "type": "string", "enum": ["SERVICE", "COMPONENT", "DEPENDENCY"] },
          "description": { "type": "string" },
          "status": { "type": "string", "enum": ["Ok", "Fail", "Degraded"] },
          "version": { "type": "string" },
          "checked": { "type": "string", "format": "date-time" },
          "error": { "type": "object", "additionalProperties": { "type": "object" } }
        }
      },
      "ColleagueChangeEventPayload": {
        "type": "object",
        "properties": {
          "eventType": { "type": "string", "enum": ["Joiner", "Leaver", "Mover", "Reinstatement"] },
          "effectiveDate": { "type": "string", "format": "date" },
          "changedAttributes": { "type": "array", "items": { "type": "string" } },
          "colleagueUUID": { "type": "string", "format": "uuid" }
        }
      },
      "RestResponseListReview": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/Review" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "type": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "DECLINED",
              "COMPLETED",
              "OVERDUE",
              "STARTED",
              "NOT_STARTED",
              "NOT_CREATED"
            ]
          },
          "number": { "type": "integer", "format": "int32" },
          "tlPointUuid": { "type": "string", "format": "uuid" },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "lastUpdatedTime": { "type": "string", "format": "date-time" },
          "changeStatusReason": { "type": "string" }
        }
      },
      "RestResponseVoid": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "object" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "OrgObjective": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "number": { "type": "integer", "format": "int32" },
          "status": { "type": "string", "enum": ["DRAFT", "PUBLISHED", "UNPUBLISHED"] },
          "title": { "type": "string" },
          "version": { "type": "integer", "format": "int32" }
        }
      },
      "RestResponseListOrgObjective": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/OrgObjective" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponsePMCycle": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/PMCycle" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ConfigEntryResponse": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "type": { "$ref": "#/components/schemas/GeneralDictionaryItem" },
          "version": { "type": "integer", "format": "int32" },
          "root": { "type": "boolean" },
          "compositeKey": { "type": "string" }
        }
      },
      "GeneralDictionaryItem": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int32" },
          "code": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "RestResponseListConfigEntryResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/ConfigEntryResponse" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "AddressList": {
        "type": "object",
        "properties": {
          "lines": { "type": "array", "items": { "type": "string" } },
          "countryCode": { "type": "string" },
          "postcode": { "type": "string" },
          "city": { "type": "string" }
        }
      },
      "Colleague": {
        "type": "object",
        "properties": {
          "colleagueUUID": { "type": "string", "format": "uuid" },
          "employeeId": { "type": "string" },
          "countryCode": { "type": "string" },
          "effectivity": { "$ref": "#/components/schemas/Effectivity" },
          "externalSystems": { "$ref": "#/components/schemas/ExternalSystems" },
          "profile": { "$ref": "#/components/schemas/Profile" },
          "contact": { "$ref": "#/components/schemas/Contact" },
          "serviceDates": { "$ref": "#/components/schemas/ServiceDates" },
          "workRelationships": { "type": "array", "items": { "$ref": "#/components/schemas/WorkRelationship" } }
        }
      },
      "ColleagueProfile": {
        "type": "object",
        "properties": {
          "colleague": { "$ref": "#/components/schemas/Colleague" },
          "profileAttributes": { "type": "array", "items": { "$ref": "#/components/schemas/TypedAttribute" } }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "workPhoneNumber": { "type": "string" },
          "addresses": { "$ref": "#/components/schemas/AddressList" }
        }
      },
      "ContractType": {
        "type": "object",
        "properties": {
          "sourceCode": { "type": "string" },
          "sourceName": { "type": "string" },
          "endDate": { "type": "string", "format": "date" }
        }
      },
      "Department": {
        "type": "object",
        "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "businessType": { "type": "string" } }
      },
      "Effectivity": {
        "type": "object",
        "properties": { "from": { "type": "string", "format": "date" }, "to": { "type": "string", "format": "date" } }
      },
      "ExternalSystems": {
        "type": "object",
        "properties": {
          "sourceSystem": { "type": "string" },
          "iam": { "$ref": "#/components/schemas/IamSourceSystem" }
        }
      },
      "Feedback": {
        "required": ["colleagueUuid", "status", "targetColleagueUuid"],
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "colleagueUuid": {
            "type": "string",
            "description": "Author. Colleague from whom feedback is written or requested.",
            "format": "uuid"
          },
          "colleagueProfile": { "$ref": "#/components/schemas/ColleagueProfile" },
          "targetColleagueUuid": {
            "type": "string",
            "description": "Colleague to whom feedback is given.",
            "format": "uuid"
          },
          "targetColleagueProfile": { "$ref": "#/components/schemas/ColleagueProfile" },
          "targetType": {
            "type": "string",
            "description": "Target type: GOAL, OBJECTIVE, VALUE_BEHAVIOR, OTHER.",
            "enum": ["GOAL", "OBJECTIVE", "VALUE_BEHAVIOR", "OTHER"]
          },
          "targetId": {
            "type": "string",
            "description": "Object identifier that is feedback given on/to or requested about/from."
          },
          "read": { "type": "boolean", "description": "Checkbox. False for Unread feedback.", "default": false },
          "status": {
            "type": "string",
            "description": "Status: DRAFT, SUBMITTED, PENDING, COMPLETED.",
            "enum": ["DRAFT", "SUBMITTED", "PENDING", "COMPLETED"]
          },
          "createdTime": { "type": "string", "format": "date-time" },
          "updatedTime": { "type": "string", "format": "date-time" },
          "feedbackItems": {
            "uniqueItems": true,
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeedbackItem" }
          }
        }
      },
      "FeedbackItem": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "code": {
            "type": "string",
            "description": "Item code. For example, whatWellDone, whatFocusOn, comment or question1, etc."
          },
          "content": { "type": "string", "description": "Body of feedback item. Answer for question or comment." },
          "feedbackUuid": { "type": "string", "description": "Link to feedback", "format": "uuid" }
        },
        "description": "The Feedback Item. Answers for questions, comments or free form feedback."
      },
      "Grade": { "type": "object", "properties": { "id": { "type": "string" }, "code": { "type": "string" } } },
      "IamSourceSystem": {
        "type": "object",
        "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "source": { "type": "string" } }
      },
      "Job": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "name": { "type": "string" },
          "costCategory": { "type": "string" }
        }
      },
      "LegalEmployer": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" }, "name": { "type": "string" } }
      },
      "Position": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "name": { "type": "string" },
          "teamName": { "type": "string" }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "firstName": { "type": "string" },
          "middleName": { "type": "string" },
          "lastName": { "type": "string" },
          "gender": { "type": "string" },
          "dateOfBirth": { "type": "string", "format": "date" }
        }
      },
      "RestResponseFeedback": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/Feedback" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ServiceDates": {
        "type": "object",
        "properties": {
          "hireDate": { "type": "string", "format": "date" },
          "leavingDate": { "type": "string", "format": "date" }
        }
      },
      "TypedAttribute": {
        "type": "object",
        "properties": {
          "colleagueUuid": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "value": { "type": "string" },
          "type": { "type": "string", "enum": ["STRING", "DATE", "NUMBER", "BOOLEAN"] }
        }
      },
      "WorkRelationship": {
        "type": "object",
        "properties": {
          "locationUUID": { "type": "string" },
          "contractType": { "$ref": "#/components/schemas/ContractType" },
          "colleagueType": { "type": "string", "enum": ["EMPLOYEE", "EXTERNAL", "CONTRACTOR"] },
          "workingStatus": { "type": "string", "enum": ["ACTIVE", "INACTIVE", "SUSPENDED", "INACTIVE_PAID"] },
          "type": { "type": "string", "enum": ["PRIMARY"] },
          "defaultExpenseAccount": { "type": "string" },
          "peopleGroup": { "type": "string" },
          "legalEmployer": { "$ref": "#/components/schemas/LegalEmployer" },
          "department": { "$ref": "#/components/schemas/Department" },
          "grade": { "$ref": "#/components/schemas/Grade" },
          "position": { "$ref": "#/components/schemas/Position" },
          "job": { "$ref": "#/components/schemas/Job" },
          "actionCode": { "type": "string" },
          "actionReasonCode": { "type": "string" },
          "userStatus": { "type": "string" },
          "workSchedule": { "type": "string" },
          "employmentType": { "type": "string" },
          "salaryFrequency": { "type": "string" },
          "workingHours": { "type": "string" },
          "costCenter": { "type": "string" },
          "assignmentId": { "type": "string" },
          "primaryEntity": { "type": "string" },
          "workingInHiredCountry": { "type": "boolean" },
          "isManager": { "type": "boolean" },
          "workLevel": { "type": "string", "enum": ["WL1", "WL2", "WL3", "WL4", "WL5"] },
          "managerUUID": { "type": "string", "format": "uuid" },
          "manager": { "$ref": "#/components/schemas/Colleague" }
        }
      },
      "Folder": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "ownerColleagueUuid": { "type": "string", "format": "uuid" },
          "parentFolderUuid": { "type": "string", "format": "uuid" },
          "title": { "type": "string" }
        }
      },
      "RestResponseListFolder": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/Folder" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseString": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "string" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseReview": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/Review" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ConfigEntry": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "type": { "$ref": "#/components/schemas/GeneralDictionaryItem" },
          "version": { "type": "integer", "format": "int32" },
          "parentUuid": { "type": "string", "format": "uuid" },
          "compositeKey": { "type": "string" }
        },
        "description": "Target organisation tree level."
      },
      "RestResponseTip": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/Tip" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "Tip": {
        "required": ["description", "imageLink", "key", "targetOrganisation", "title"],
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "version": { "type": "integer", "description": "History management.", "format": "int32" },
          "key": {
            "type": "string",
            "description": "Link to frontend component or page.",
            "example": "com.tesco.pma.tip"
          },
          "title": { "type": "string", "description": "Title.", "example": "Do you know?" },
          "description": {
            "type": "string",
            "description": "Description.",
            "example": "That you can submit new objectives at any time during the performance cycle?"
          },
          "targetOrganisation": { "$ref": "#/components/schemas/ConfigEntry" },
          "imageLink": {
            "type": "string",
            "description": "Image link.",
            "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
          },
          "published": { "type": "boolean", "description": "Published checkbox.", "example": false },
          "createdTime": { "type": "string", "format": "date-time" },
          "updatedTime": { "type": "string", "format": "date-time" }
        }
      },
      "RestResponseUser": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/User" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "colleague": { "$ref": "#/components/schemas/Colleague" },
          "profileAttributes": { "type": "array", "items": { "$ref": "#/components/schemas/TypedAttribute" } },
          "roles": { "type": "array", "items": { "type": "string" } }
        }
      },
      "ChangeAccountStatusRequest": {
        "type": "object",
        "properties": {
          "accountName": { "type": "string" },
          "status": { "type": "string", "enum": ["enabled", "disabled"] }
        }
      },
      "RestResponseConfigEntryResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/ConfigEntryResponse" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "OrganisationDictionary": {
        "type": "object",
        "properties": {
          "code": { "type": "string" },
          "name": { "type": "string" },
          "level": { "type": "integer", "format": "int32" }
        }
      },
      "RestResponseOrganisationDictionary": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/OrganisationDictionary" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ColleagueEntity": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "firstName": { "type": "string" },
          "middleName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string" },
          "workLevel": { "$ref": "#/components/schemas/WorkLevel" },
          "primaryEntity": { "type": "string" },
          "country": { "$ref": "#/components/schemas/Country" },
          "department": { "$ref": "#/components/schemas/Department" },
          "salaryFrequency": { "type": "string" },
          "job": { "$ref": "#/components/schemas/Job" },
          "iamSource": { "type": "string" },
          "iamId": { "type": "string" },
          "managerUuid": { "type": "string", "format": "uuid" },
          "employmentType": { "type": "string" },
          "hireDate": { "type": "string", "format": "date" },
          "leavingDate": { "type": "string", "format": "date" },
          "manager": { "type": "boolean" },
          "locationId": { "type": "string" },
          "legalEntity": { "type": "string" }
        }
      },
      "Country": { "type": "object", "properties": { "name": { "type": "string" }, "code": { "type": "string" } } },
      "RestResponseListColleagueEntity": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/ColleagueEntity" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "WorkLevel": { "type": "object", "properties": { "name": { "type": "string" }, "code": { "type": "string" } } },
      "RestResponseListFeedback": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/Feedback" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseGeneralDictionaryItem": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/GeneralDictionaryItem" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ImportReport": {
        "type": "object",
        "properties": {
          "requestUuid": { "type": "string", "format": "uuid" },
          "imported": { "uniqueItems": true, "type": "array", "items": { "type": "string", "format": "uuid" } },
          "skipped": { "uniqueItems": true, "type": "array", "items": { "$ref": "#/components/schemas/ImportError" } },
          "warn": { "uniqueItems": true, "type": "array", "items": { "$ref": "#/components/schemas/ImportError" } }
        }
      },
      "RestResponseImportReport": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/ImportReport" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponsePMCycleMetadata": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/PMCycleMetadata" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "ownerColleagueUuid": { "type": "string", "format": "uuid" },
          "referenceColleagueUuid": { "type": "string", "format": "uuid" },
          "status": { "type": "string", "enum": ["CREATED", "ARCHIVED"] },
          "updateTime": { "type": "string", "format": "date-time" },
          "folderUuid": { "type": "string", "format": "uuid" },
          "title": { "type": "string" },
          "content": { "type": "string" }
        }
      },
      "RestResponseListNote": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/Note" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseBoolean": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "boolean" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ColleagueView": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "firstName": { "type": "string" },
          "middleName": { "type": "string" },
          "lastName": { "type": "string" },
          "jobName": { "type": "string" },
          "businessType": { "type": "string" },
          "lineManager": { "$ref": "#/components/schemas/ColleagueSimple" },
          "reviews": { "type": "array", "items": { "$ref": "#/components/schemas/SimplifiedReview" } },
          "timeline": { "type": "array", "items": { "$ref": "#/components/schemas/TimelinePoint" } }
        }
      },
      "RestResponseListColleagueView": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/ColleagueView" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "SimplifiedReview": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "type": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "DECLINED",
              "COMPLETED",
              "OVERDUE",
              "STARTED",
              "NOT_STARTED",
              "NOT_CREATED"
            ]
          },
          "number": { "type": "integer", "format": "int32" }
        }
      },
      "TimelinePoint": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "colleagueCycleUuid": { "type": "string", "format": "uuid" },
          "code": { "type": "string" },
          "description": { "type": "string" },
          "type": { "type": "string", "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"] },
          "startTime": { "type": "string", "format": "date-time" },
          "endTime": { "type": "string", "format": "date-time" },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "DECLINED",
              "COMPLETED",
              "OVERDUE",
              "STARTED",
              "NOT_STARTED",
              "NOT_CREATED"
            ]
          },
          "reviewType": { "type": "string", "enum": ["OBJECTIVE", "MYR", "EYR"] },
          "count": { "type": "integer", "format": "int32" },
          "lastUpdatedTime": { "type": "string", "format": "date-time" }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "eventId": { "type": "string" },
          "eventName": { "type": "string" },
          "eventProperties": { "type": "object", "additionalProperties": { "type": "object" } },
          "eventCreationDate": { "type": "string", "format": "date-time" },
          "callbackEvent": { "$ref": "#/components/schemas/Event" },
          "callbackServiceURL": { "type": "string" },
          "eventPriority": {
            "type": "string",
            "enum": [
              "HIGHEST",
              "HIGH_H",
              "HIGH",
              "HIGH_L",
              "NORMAL_H",
              "NORMAL",
              "NORMAL_L",
              "LOW_H",
              "LOW",
              "LOW_L",
              "LOWEST"
            ]
          }
        }
      },
      "RestResponseListDeploymentInfo": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/DeploymentInfo" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseListOrganisationDictionary": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/OrganisationDictionary" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseMapStringString": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "object", "additionalProperties": { "type": "string" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseFile": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/File" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseListColleagueProfile": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/ColleagueProfile" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "PDPGoal": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "colleagueUuid": { "type": "string", "format": "uuid" },
          "number": { "type": "integer", "format": "int32" },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "achievementDate": { "type": "string", "format": "date" },
          "status": { "type": "string", "enum": ["DRAFT", "PUBLISHED", "UNPUBLISHED"] }
        }
      },
      "PDPResponse": {
        "type": "object",
        "properties": {
          "goals": { "type": "array", "items": { "$ref": "#/components/schemas/PDPGoal" } },
          "form": { "$ref": "#/components/schemas/PMFormElement" }
        }
      },
      "RestResponsePDPResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/PDPResponse" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseNote": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/Note" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "ColumnMetadata": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "type": {
            "type": "string",
            "enum": ["BLANK", "ERROR", "STRING", "BOOLEAN", "NUMBER", "DATE", "INTEGER", "DECIMAL"]
          },
          "description": { "type": "string" },
          "code": { "type": "string" }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "metadata": { "$ref": "#/components/schemas/ReportMetadata" },
          "data": { "type": "array", "items": { "type": "array", "items": { "type": "object" } } }
        }
      },
      "ReportMetadata": {
        "type": "object",
        "properties": {
          "columnMetadata": { "type": "array", "items": { "$ref": "#/components/schemas/ColumnMetadata" } },
          "id": { "type": "string" },
          "code": { "type": "string" },
          "description": { "type": "string" },
          "fileName": { "type": "string" },
          "sheetName": { "type": "string" },
          "name": { "type": "string" }
        }
      },
      "RestResponseReport": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/Report" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RoleRequest": {
        "type": "object",
        "properties": { "accountName": { "type": "string" }, "role": { "type": "object" } }
      },
      "OverallHealth": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["Ok", "Fail", "Degraded"] },
          "version": { "type": "string" },
          "component": { "type": "array", "items": { "$ref": "#/components/schemas/Health" } }
        }
      },
      "UpdateReviewsStatusRequest": {
        "type": "object",
        "properties": {
          "reason": { "type": "string" },
          "reviews": { "type": "array", "items": { "$ref": "#/components/schemas/Review" } }
        }
      },
      "RestResponsePMTimelinePointStatus": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_APPROVAL",
              "APPROVED",
              "DECLINED",
              "COMPLETED",
              "OVERDUE",
              "STARTED",
              "NOT_STARTED",
              "NOT_CREATED"
            ]
          },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseListString": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "type": "string" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseListPDPGoal": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/PDPGoal" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "CompositePMCycleMetadataResponse": {
        "type": "object",
        "properties": {
          "metadata": { "$ref": "#/components/schemas/PMCycleMetadata" },
          "forms": { "type": "array", "items": { "$ref": "#/components/schemas/PMForm" } }
        }
      },
      "PMForm": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "description": { "type": "string" },
          "type": { "type": "string", "enum": ["ELEMENT", "TIMELINE_POINT", "REVIEW", "FORM", "CYCLE"] },
          "properties": { "type": "object", "additionalProperties": { "type": "string" } },
          "key": { "type": "string" },
          "json": { "type": "string" }
        }
      },
      "RestResponseCompositePMCycleMetadataResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/CompositePMCycleMetadataResponse" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseListTypedAttribute": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/TypedAttribute" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "CreateAccountRequest": {
        "type": "object",
        "properties": {
          "accountName": { "type": "string" },
          "accountType": { "type": "string", "enum": ["user"] },
          "iamId": { "type": "string" },
          "status": { "type": "string", "enum": ["enabled", "disabled"] },
          "role": { "type": "object" }
        }
      },
      "ImportRequest": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid" },
          "fileName": { "type": "string" },
          "status": { "type": "string", "enum": ["REGISTERED", "IN_PROGRESS", "PROCESSED", "FAILED"] },
          "createdBy": { "type": "string" },
          "creationTime": { "type": "string", "format": "date-time" },
          "lastUpdateTime": { "type": "string", "format": "date-time" }
        }
      },
      "RestResponseImportRequest": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/ImportRequest" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseListTimelinePoint": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/TimelinePoint" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "CompositePMCycleResponse": {
        "type": "object",
        "properties": {
          "cycle": { "$ref": "#/components/schemas/PMCycle" },
          "forms": { "type": "array", "items": { "$ref": "#/components/schemas/PMForm" } }
        }
      },
      "RestResponseCompositePMCycleResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/CompositePMCycleResponse" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "accountName": { "type": "string" },
          "accountType": { "type": "string", "enum": ["user"] },
          "employeeNumber": { "type": "string" },
          "iamId": { "type": "string" },
          "lastLogin": { "type": "string", "format": "date-time" },
          "role": { "type": "integer", "format": "int32" },
          "roles": { "type": "array", "items": { "$ref": "#/components/schemas/Role" } },
          "status": { "type": "string", "enum": ["enabled", "disabled"] }
        }
      },
      "ExtendedRestResponseListAccount": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/Account" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } },
          "nextPage": { "type": "string" }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "roleId": { "type": "integer", "format": "int32" },
          "roleName": { "type": "string" },
          "roleDesc": { "type": "string" }
        }
      },
      "RestResponseListGeneralDictionaryItem": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/GeneralDictionaryItem" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseColleagueProfile": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "$ref": "#/components/schemas/ColleagueProfile" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseListTip": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/Tip" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseUUID": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "string", "format": "uuid" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "RestResponseListRole": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/Role" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "AuditOrgObjectiveReport": {
        "type": "object",
        "properties": {
          "updatedBy": { "$ref": "#/components/schemas/ColleagueSimple" },
          "updatedTime": { "type": "string", "format": "date-time" },
          "action": { "type": "string", "enum": ["SAVE_AS_DRAFT", "PUBLISH", "UNPUBLISH"] }
        }
      },
      "RestResponseListAuditOrgObjectiveReport": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/AuditOrgObjectiveReport" } },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      }
    },
    "responses": {
      "BAD_REQUEST": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RestResponseVoid" },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "CONSTRAINT_VIOLATION",
                  "message": "Constraint violation",
                  "details": [{ "message": "must not be blank", "field": "param_name" }]
                }
              ]
            }
          }
        }
      },
      "UNAUTHORIZED": {
        "description": "Unauthorized",
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "description": "https://tools.ietf.org/html/rfc6750#section-3.1",
              "example": "Bearer error=\"invalid_token\", error_description=\"Provided token isn't active\", error_uri=\"https://tools.ietf.org/html/rfc6750#section-3.1\""
            }
          }
        },
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RestResponseVoid" },
            "example": {
              "success": false,
              "errors": [
                {
                  "code": "UNAUTHENTICATED",
                  "message": "Authentication failed",
                  "details": [{ "message": "Detailed auth error message", "target": "auth-provider-name" }]
                }
              ]
            }
          }
        }
      },
      "FORBIDDEN": {
        "description": "Forbidden",
        "headers": {
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "description": "https://tools.ietf.org/html/rfc6750#section-3.1",
              "example": "Bearer error=\"insufficient_scope\", error_description=\"The request requires higher privileges than provided by the access token.\", error_uri=\"https://tools.ietf.org/html/rfc6750#section-3.1\""
            }
          }
        },
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RestResponseVoid" },
            "example": { "success": false, "errors": [{ "code": "ACCESS_DENIED", "message": "Access is denied" }] }
          }
        }
      },
      "INTERNAL_SERVER_ERROR": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RestResponseVoid" },
            "example": {
              "success": false,
              "errors": [{ "code": "ER_CODE_UNEXPECTED_EXCEPTION", "message": "Unexpected internal service error" }]
            }
          }
        }
      },
      "NOT_FOUND": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RestResponseVoid" },
            "example": {
              "success": false,
              "errors": [{ "code": "ENTITY_NOT_FOUND", "message": "Entity was not found for parameter" }]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-jwt-identity": {
        "type": "http",
        "description": "supports old Identity V3 token as a fallback",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "additional-auth-jwt": {
        "type": "apiKey",
        "description": "additional auth. Used to authorize API by AD groups.",
        "name": "Authorization-App",
        "in": "header"
      }
    }
  }
}
