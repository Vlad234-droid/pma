/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  RestResponse,
  RestResponseFromJSON,
  RestResponseToJSON,
  RestResponseListSubsidiary,
  RestResponseListSubsidiaryFromJSON,
  RestResponseListSubsidiaryToJSON,
  RestResponseSubsidiary,
  RestResponseSubsidiaryFromJSON,
  RestResponseSubsidiaryToJSON,
  RestResponseVoid,
  RestResponseVoidFromJSON,
  RestResponseVoidToJSON,
  Subsidiary,
  SubsidiaryFromJSON,
  SubsidiaryToJSON,
} from '../models';

export interface CreateSubsidiaryRequest {
  subsidiary: Subsidiary;
}

export interface DeleteSubsidiaryRequest {
  subsidiaryUuid: string;
}

export interface GetSubsidiaryRequest {
  subsidiaryUuid: string;
}

export interface UpdateSubsidiaryRequest {
  subsidiaryUuid: string;
  subsidiary: Subsidiary;
}

/**
 *
 */
export class SubsidiaryApi extends runtime.BaseAPI {
  /**
   * Subsidiary created
   * Create a Subsidiary
   */
  async createSubsidiaryRaw(
    requestParameters: CreateSubsidiaryRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseSubsidiary>> {
    if (requestParameters.subsidiary === null || requestParameters.subsidiary === undefined) {
      throw new runtime.RequiredError(
        'subsidiary',
        'Required parameter requestParameters.subsidiary was null or undefined when calling createSubsidiary.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidiaries`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SubsidiaryToJSON(requestParameters.subsidiary),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseSubsidiaryFromJSON(jsonValue));
  }

  /**
   * Subsidiary created
   * Create a Subsidiary
   */
  async createSubsidiary(
    requestParameters: CreateSubsidiaryRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseSubsidiary> {
    const response = await this.createSubsidiaryRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete existing Subsidiary
   * Delete existing Subsidiary
   */
  async deleteSubsidiaryRaw(
    requestParameters: DeleteSubsidiaryRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseVoid>> {
    if (requestParameters.subsidiaryUuid === null || requestParameters.subsidiaryUuid === undefined) {
      throw new runtime.RequiredError(
        'subsidiaryUuid',
        'Required parameter requestParameters.subsidiaryUuid was null or undefined when calling deleteSubsidiary.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidiaries/{subsidiaryUuid}`.replace(
          `{${'subsidiaryUuid'}}`,
          encodeURIComponent(String(requestParameters.subsidiaryUuid)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseVoidFromJSON(jsonValue));
  }

  /**
   * Delete existing Subsidiary
   * Delete existing Subsidiary
   */
  async deleteSubsidiary(
    requestParameters: DeleteSubsidiaryRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseVoid> {
    const response = await this.deleteSubsidiaryRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all Subsidiaries
   * Get all Subsidiaries
   */
  async getSubsidiariesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RestResponseListSubsidiary>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidiaries`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseListSubsidiaryFromJSON(jsonValue));
  }

  /**
   * Get all Subsidiaries
   * Get all Subsidiaries
   */
  async getSubsidiaries(initOverrides?: RequestInit): Promise<RestResponseListSubsidiary> {
    const response = await this.getSubsidiariesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a Subsidiary by its uuid
   */
  async getSubsidiaryRaw(
    requestParameters: GetSubsidiaryRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseSubsidiary>> {
    if (requestParameters.subsidiaryUuid === null || requestParameters.subsidiaryUuid === undefined) {
      throw new runtime.RequiredError(
        'subsidiaryUuid',
        'Required parameter requestParameters.subsidiaryUuid was null or undefined when calling getSubsidiary.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidiaries/{subsidiaryUuid}`.replace(
          `{${'subsidiaryUuid'}}`,
          encodeURIComponent(String(requestParameters.subsidiaryUuid)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseSubsidiaryFromJSON(jsonValue));
  }

  /**
   * Get a Subsidiary by its uuid
   */
  async getSubsidiary(
    requestParameters: GetSubsidiaryRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseSubsidiary> {
    const response = await this.getSubsidiaryRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update existing Subsidiary
   * Update existing Subsidiary
   */
  async updateSubsidiaryRaw(
    requestParameters: UpdateSubsidiaryRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseSubsidiary>> {
    if (requestParameters.subsidiaryUuid === null || requestParameters.subsidiaryUuid === undefined) {
      throw new runtime.RequiredError(
        'subsidiaryUuid',
        'Required parameter requestParameters.subsidiaryUuid was null or undefined when calling updateSubsidiary.',
      );
    }

    if (requestParameters.subsidiary === null || requestParameters.subsidiary === undefined) {
      throw new runtime.RequiredError(
        'subsidiary',
        'Required parameter requestParameters.subsidiary was null or undefined when calling updateSubsidiary.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidiaries/{subsidiaryUuid}`.replace(
          `{${'subsidiaryUuid'}}`,
          encodeURIComponent(String(requestParameters.subsidiaryUuid)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: SubsidiaryToJSON(requestParameters.subsidiary),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseSubsidiaryFromJSON(jsonValue));
  }

  /**
   * Update existing Subsidiary
   * Update existing Subsidiary
   */
  async updateSubsidiary(
    requestParameters: UpdateSubsidiaryRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseSubsidiary> {
    const response = await this.updateSubsidiaryRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
