/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  RestResponse,
  RestResponseFromJSON,
  RestResponseToJSON,
  RestResponseColleagueProfile,
  RestResponseColleagueProfileFromJSON,
  RestResponseColleagueProfileToJSON,
  RestResponseListTypedAttribute,
  RestResponseListTypedAttributeFromJSON,
  RestResponseListTypedAttributeToJSON,
  TypedAttribute,
  TypedAttributeFromJSON,
  TypedAttributeToJSON,
} from '../models';

export interface CreateProfileAttributesRequest {
  colleagueUuid: string;
  typedAttribute: Array<TypedAttribute>;
}

export interface DeleteProfileAttributesRequest {
  colleagueUuid: string;
  typedAttribute: Array<TypedAttribute>;
}

export interface GetProfileByColleagueUuidRequest {
  colleagueUuid: string;
}

export interface UpdateProfileAttributesRequest {
  colleagueUuid: string;
  typedAttribute: Array<TypedAttribute>;
}

/**
 *
 */
export class ProfileApi extends runtime.BaseAPI {
  /**
   * Profile attributes created
   * Create new profile attributes
   */
  async createProfileAttributesRaw(
    requestParameters: CreateProfileAttributesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseListTypedAttribute>> {
    if (requestParameters.colleagueUuid === null || requestParameters.colleagueUuid === undefined) {
      throw new runtime.RequiredError(
        'colleagueUuid',
        'Required parameter requestParameters.colleagueUuid was null or undefined when calling createProfileAttributes.',
      );
    }

    if (requestParameters.typedAttribute === null || requestParameters.typedAttribute === undefined) {
      throw new runtime.RequiredError(
        'typedAttribute',
        'Required parameter requestParameters.typedAttribute was null or undefined when calling createProfileAttributes.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/colleagues/{colleagueUuid}/attributes`.replace(
          `{${'colleagueUuid'}}`,
          encodeURIComponent(String(requestParameters.colleagueUuid)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.typedAttribute.map(TypedAttributeToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseListTypedAttributeFromJSON(jsonValue));
  }

  /**
   * Profile attributes created
   * Create new profile attributes
   */
  async createProfileAttributes(
    requestParameters: CreateProfileAttributesRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseListTypedAttribute> {
    const response = await this.createProfileAttributesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete existing profile attributes
   * Delete existing profile attributes
   */
  async deleteProfileAttributesRaw(
    requestParameters: DeleteProfileAttributesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseListTypedAttribute>> {
    if (requestParameters.colleagueUuid === null || requestParameters.colleagueUuid === undefined) {
      throw new runtime.RequiredError(
        'colleagueUuid',
        'Required parameter requestParameters.colleagueUuid was null or undefined when calling deleteProfileAttributes.',
      );
    }

    if (requestParameters.typedAttribute === null || requestParameters.typedAttribute === undefined) {
      throw new runtime.RequiredError(
        'typedAttribute',
        'Required parameter requestParameters.typedAttribute was null or undefined when calling deleteProfileAttributes.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/colleagues/{colleagueUuid}/attributes`.replace(
          `{${'colleagueUuid'}}`,
          encodeURIComponent(String(requestParameters.colleagueUuid)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.typedAttribute.map(TypedAttributeToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseListTypedAttributeFromJSON(jsonValue));
  }

  /**
   * Delete existing profile attributes
   * Delete existing profile attributes
   */
  async deleteProfileAttributes(
    requestParameters: DeleteProfileAttributesRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseListTypedAttribute> {
    const response = await this.deleteProfileAttributesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get profile by colleague uuid
   * Get profile by colleague uuid
   */
  async getProfileByColleagueUuidRaw(
    requestParameters: GetProfileByColleagueUuidRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseColleagueProfile>> {
    if (requestParameters.colleagueUuid === null || requestParameters.colleagueUuid === undefined) {
      throw new runtime.RequiredError(
        'colleagueUuid',
        'Required parameter requestParameters.colleagueUuid was null or undefined when calling getProfileByColleagueUuid.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/colleagues/{colleagueUuid}`.replace(
          `{${'colleagueUuid'}}`,
          encodeURIComponent(String(requestParameters.colleagueUuid)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseColleagueProfileFromJSON(jsonValue));
  }

  /**
   * Get profile by colleague uuid
   * Get profile by colleague uuid
   */
  async getProfileByColleagueUuid(
    requestParameters: GetProfileByColleagueUuidRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseColleagueProfile> {
    const response = await this.getProfileByColleagueUuidRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update existing profile attributes
   * Update existing Profile
   */
  async updateProfileAttributesRaw(
    requestParameters: UpdateProfileAttributesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseListTypedAttribute>> {
    if (requestParameters.colleagueUuid === null || requestParameters.colleagueUuid === undefined) {
      throw new runtime.RequiredError(
        'colleagueUuid',
        'Required parameter requestParameters.colleagueUuid was null or undefined when calling updateProfileAttributes.',
      );
    }

    if (requestParameters.typedAttribute === null || requestParameters.typedAttribute === undefined) {
      throw new runtime.RequiredError(
        'typedAttribute',
        'Required parameter requestParameters.typedAttribute was null or undefined when calling updateProfileAttributes.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/colleagues/{colleagueUuid}/attributes`.replace(
          `{${'colleagueUuid'}}`,
          encodeURIComponent(String(requestParameters.colleagueUuid)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.typedAttribute.map(TypedAttributeToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseListTypedAttributeFromJSON(jsonValue));
  }

  /**
   * Update existing profile attributes
   * Update existing Profile
   */
  async updateProfileAttributes(
    requestParameters: UpdateProfileAttributesRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseListTypedAttribute> {
    const response = await this.updateProfileAttributesRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
