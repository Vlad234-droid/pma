/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import { Event, EventFromJSON, EventToJSON, RestResponse, RestResponseFromJSON, RestResponseToJSON } from '../models';

export interface HandleRequest {
  event: Event;
}

/**
 *
 */
export class SpringRestEventListenerApi extends runtime.BaseAPI {
  /**
   */
  async handleRaw(requestParameters: HandleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.event === null || requestParameters.event === undefined) {
      throw new runtime.RequiredError(
        'event',
        'Required parameter requestParameters.event was null or undefined when calling handle.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/events`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EventToJSON(requestParameters.event),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async handle(requestParameters: HandleRequest, initOverrides?: RequestInit): Promise<void> {
    await this.handleRaw(requestParameters, initOverrides);
  }
}
