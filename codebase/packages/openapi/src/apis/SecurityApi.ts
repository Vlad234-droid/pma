/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  RestResponse,
  RestResponseFromJSON,
  RestResponseToJSON,
  RestResponseCollectionSubsidiaryPermission,
  RestResponseCollectionSubsidiaryPermissionFromJSON,
  RestResponseCollectionSubsidiaryPermissionToJSON,
  RestResponseVoid,
  RestResponseVoidFromJSON,
  RestResponseVoidToJSON,
} from '../models';

export interface GetSubsidiaryPermissionsRequest {
  subsidiaryUuid: string;
}

export interface GrantSubsidiaryPermissionRequest {
  subsidiaryUuid: string;
  colleagueUuid: string;
  role: string;
}

export interface RevokeSubsidiaryPermissionRequest {
  subsidiaryUuid: string;
  colleagueUuid: string;
  role: string;
}

/**
 *
 */
export class SecurityApi extends runtime.BaseAPI {
  /**
   * Retrieve permissions for subsidiary
   * Retrieve permissions for subsidiary
   */
  async getSubsidiaryPermissionsRaw(
    requestParameters: GetSubsidiaryPermissionsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseCollectionSubsidiaryPermission>> {
    if (requestParameters.subsidiaryUuid === null || requestParameters.subsidiaryUuid === undefined) {
      throw new runtime.RequiredError(
        'subsidiaryUuid',
        'Required parameter requestParameters.subsidiaryUuid was null or undefined when calling getSubsidiaryPermissions.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidiaries/{subsidiaryUuid}/permissions`.replace(
          `{${'subsidiaryUuid'}}`,
          encodeURIComponent(String(requestParameters.subsidiaryUuid)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RestResponseCollectionSubsidiaryPermissionFromJSON(jsonValue),
    );
  }

  /**
   * Retrieve permissions for subsidiary
   * Retrieve permissions for subsidiary
   */
  async getSubsidiaryPermissions(
    requestParameters: GetSubsidiaryPermissionsRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseCollectionSubsidiaryPermission> {
    const response = await this.getSubsidiaryPermissionsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Grant subsidiary permission for user with particular role
   * Grant permission
   */
  async grantSubsidiaryPermissionRaw(
    requestParameters: GrantSubsidiaryPermissionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseVoid>> {
    if (requestParameters.subsidiaryUuid === null || requestParameters.subsidiaryUuid === undefined) {
      throw new runtime.RequiredError(
        'subsidiaryUuid',
        'Required parameter requestParameters.subsidiaryUuid was null or undefined when calling grantSubsidiaryPermission.',
      );
    }

    if (requestParameters.colleagueUuid === null || requestParameters.colleagueUuid === undefined) {
      throw new runtime.RequiredError(
        'colleagueUuid',
        'Required parameter requestParameters.colleagueUuid was null or undefined when calling grantSubsidiaryPermission.',
      );
    }

    if (requestParameters.role === null || requestParameters.role === undefined) {
      throw new runtime.RequiredError(
        'role',
        'Required parameter requestParameters.role was null or undefined when calling grantSubsidiaryPermission.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidiaries/{subsidiaryUuid}/permissions/colleagues/{colleagueUuid}/roles/{role}`
          .replace(`{${'subsidiaryUuid'}}`, encodeURIComponent(String(requestParameters.subsidiaryUuid)))
          .replace(`{${'colleagueUuid'}}`, encodeURIComponent(String(requestParameters.colleagueUuid)))
          .replace(`{${'role'}}`, encodeURIComponent(String(requestParameters.role))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseVoidFromJSON(jsonValue));
  }

  /**
   * Grant subsidiary permission for user with particular role
   * Grant permission
   */
  async grantSubsidiaryPermission(
    requestParameters: GrantSubsidiaryPermissionRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseVoid> {
    const response = await this.grantSubsidiaryPermissionRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Revoke subsidiary permission for user with particular role
   * Revoke permission
   */
  async revokeSubsidiaryPermissionRaw(
    requestParameters: RevokeSubsidiaryPermissionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseVoid>> {
    if (requestParameters.subsidiaryUuid === null || requestParameters.subsidiaryUuid === undefined) {
      throw new runtime.RequiredError(
        'subsidiaryUuid',
        'Required parameter requestParameters.subsidiaryUuid was null or undefined when calling revokeSubsidiaryPermission.',
      );
    }

    if (requestParameters.colleagueUuid === null || requestParameters.colleagueUuid === undefined) {
      throw new runtime.RequiredError(
        'colleagueUuid',
        'Required parameter requestParameters.colleagueUuid was null or undefined when calling revokeSubsidiaryPermission.',
      );
    }

    if (requestParameters.role === null || requestParameters.role === undefined) {
      throw new runtime.RequiredError(
        'role',
        'Required parameter requestParameters.role was null or undefined when calling revokeSubsidiaryPermission.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidiaries/{subsidiaryUuid}/permissions/colleagues/{colleagueUuid}/roles/{role}`
          .replace(`{${'subsidiaryUuid'}}`, encodeURIComponent(String(requestParameters.subsidiaryUuid)))
          .replace(`{${'colleagueUuid'}}`, encodeURIComponent(String(requestParameters.colleagueUuid)))
          .replace(`{${'role'}}`, encodeURIComponent(String(requestParameters.role))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseVoidFromJSON(jsonValue));
  }

  /**
   * Revoke subsidiary permission for user with particular role
   * Revoke permission
   */
  async revokeSubsidiaryPermission(
    requestParameters: RevokeSubsidiaryPermissionRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseVoid> {
    const response = await this.revokeSubsidiaryPermissionRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
