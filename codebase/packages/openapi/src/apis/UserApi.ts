/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  RestResponse,
  RestResponseFromJSON,
  RestResponseToJSON,
  RestResponseCollectionUser,
  RestResponseCollectionUserFromJSON,
  RestResponseCollectionUserToJSON,
  RestResponseUser,
  RestResponseUserFromJSON,
  RestResponseUserToJSON,
  UserIncludes,
  UserIncludesFromJSON,
  UserIncludesToJSON,
} from '../models';

export interface GetMeRequest {
  includes?: Set<UserIncludes>;
}

export interface GetUserByColleagueUuidRequest {
  colleagueUuid: string;
  includes?: Set<UserIncludes>;
}

export interface GetUserByIamIdRequest {
  iamId: string;
  includes?: Set<UserIncludes>;
}

export interface GetUsersHasSubsidiaryPermissionRequest {
  subsidiaryPermissionSubsidiaryUuid?: string;
  subsidiaryPermissionRole?: GetUsersHasSubsidiaryPermissionSubsidiaryPermissionRoleEnum;
  includes?: Set<UserIncludes>;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
  /**
   * Get user info for current authenticated user
   * Get me
   */
  async getMeRaw(
    requestParameters: GetMeRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseUser>> {
    const queryParameters: any = {};

    if (requestParameters.includes) {
      queryParameters['includes'] = requestParameters.includes;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/users/me`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseUserFromJSON(jsonValue));
  }

  /**
   * Get user info for current authenticated user
   * Get me
   */
  async getMe(requestParameters: GetMeRequest, initOverrides?: RequestInit): Promise<RestResponseUser> {
    const response = await this.getMeRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get user by colleague uuid
   * Get user by colleague uuid
   */
  async getUserByColleagueUuidRaw(
    requestParameters: GetUserByColleagueUuidRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseUser>> {
    if (requestParameters.colleagueUuid === null || requestParameters.colleagueUuid === undefined) {
      throw new runtime.RequiredError(
        'colleagueUuid',
        'Required parameter requestParameters.colleagueUuid was null or undefined when calling getUserByColleagueUuid.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includes) {
      queryParameters['includes'] = requestParameters.includes;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/users/{colleagueUuid}`.replace(
          `{${'colleagueUuid'}}`,
          encodeURIComponent(String(requestParameters.colleagueUuid)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseUserFromJSON(jsonValue));
  }

  /**
   * Get user by colleague uuid
   * Get user by colleague uuid
   */
  async getUserByColleagueUuid(
    requestParameters: GetUserByColleagueUuidRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseUser> {
    const response = await this.getUserByColleagueUuidRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get user by iam id (TPX)
   * Get user by iam id (TPX)
   */
  async getUserByIamIdRaw(
    requestParameters: GetUserByIamIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseUser>> {
    if (requestParameters.iamId === null || requestParameters.iamId === undefined) {
      throw new runtime.RequiredError(
        'iamId',
        'Required parameter requestParameters.iamId was null or undefined when calling getUserByIamId.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includes) {
      queryParameters['includes'] = requestParameters.includes;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/users/iam-ids/{iamId}`.replace(`{${'iamId'}}`, encodeURIComponent(String(requestParameters.iamId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseUserFromJSON(jsonValue));
  }

  /**
   * Get user by iam id (TPX)
   * Get user by iam id (TPX)
   */
  async getUserByIamId(
    requestParameters: GetUserByIamIdRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseUser> {
    const response = await this.getUserByIamIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get users that have subsidiary permission
   * Get users
   */
  async getUsersHasSubsidiaryPermissionRaw(
    requestParameters: GetUsersHasSubsidiaryPermissionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseCollectionUser>> {
    const queryParameters: any = {};

    if (requestParameters.subsidiaryPermissionSubsidiaryUuid !== undefined) {
      queryParameters['subsidiaryPermission.subsidiaryUuid'] = requestParameters.subsidiaryPermissionSubsidiaryUuid;
    }

    if (requestParameters.subsidiaryPermissionRole !== undefined) {
      queryParameters['subsidiaryPermission.role'] = requestParameters.subsidiaryPermissionRole;
    }

    if (requestParameters.includes) {
      queryParameters['includes'] = requestParameters.includes;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseCollectionUserFromJSON(jsonValue));
  }

  /**
   * Get users that have subsidiary permission
   * Get users
   */
  async getUsersHasSubsidiaryPermission(
    requestParameters: GetUsersHasSubsidiaryPermissionRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseCollectionUser> {
    const response = await this.getUsersHasSubsidiaryPermissionRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 * @enum {string}
 */
export enum GetUsersHasSubsidiaryPermissionSubsidiaryPermissionRoleEnum {
  SubsidiaryManager = 'SubsidiaryManager',
}
