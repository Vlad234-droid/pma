/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  Health,
  HealthFromJSON,
  HealthToJSON,
  OverallHealth,
  OverallHealthFromJSON,
  OverallHealthToJSON,
  RestResponse,
  RestResponseFromJSON,
  RestResponseToJSON,
} from '../models';

/**
 *
 */
export class DiagnosticApi extends runtime.BaseAPI {
  /**
   * Return a successful response if this instance is able to receive traffic
   */
  async getHcRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Health>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/hc`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => HealthFromJSON(jsonValue));
  }

  /**
   * Return a successful response if this instance is able to receive traffic
   */
  async getHc(initOverrides?: RequestInit): Promise<Health> {
    const response = await this.getHcRaw(initOverrides);
    return await response.value();
  }

  /**
   * Return a successful response in the case that the API Domain is in a healthy working state
   */
  async getLiveRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Health>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/live`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => HealthFromJSON(jsonValue));
  }

  /**
   * Return a successful response in the case that the API Domain is in a healthy working state
   */
  async getLive(initOverrides?: RequestInit): Promise<Health> {
    const response = await this.getLiveRaw(initOverrides);
    return await response.value();
  }

  /**
   * Return the status of API domain and all its components and dependencies
   */
  async getOverallHealthCheckRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<OverallHealth>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_healthcheck`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => OverallHealthFromJSON(jsonValue));
  }

  /**
   * Return the status of API domain and all its components and dependencies
   */
  async getOverallHealthCheck(initOverrides?: RequestInit): Promise<OverallHealth> {
    const response = await this.getOverallHealthCheckRaw(initOverrides);
    return await response.value();
  }

  /**
   * Return a successful response if this instance is able to receive traffic
   */
  async getReadyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Health>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_ready`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => HealthFromJSON(jsonValue));
  }

  /**
   * Return a successful response if this instance is able to receive traffic
   */
  async getReady(initOverrides?: RequestInit): Promise<Health> {
    const response = await this.getReadyRaw(initOverrides);
    return await response.value();
  }

  /**
   * Return a summary of the health check results for API Domain
   */
  async getStatusRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Health>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_status`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => HealthFromJSON(jsonValue));
  }

  /**
   * Return a summary of the health check results for API Domain
   */
  async getStatus(initOverrides?: RequestInit): Promise<Health> {
    const response = await this.getStatusRaw(initOverrides);
    return await response.value();
  }

  /**
   * Return a successful response in the case that the API Domain is in a healthy working state
   */
  async getWorkingRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Health>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/_working`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => HealthFromJSON(jsonValue));
  }

  /**
   * Return a successful response in the case that the API Domain is in a healthy working state
   */
  async getWorking(initOverrides?: RequestInit): Promise<Health> {
    const response = await this.getWorkingRaw(initOverrides);
    return await response.value();
  }
}
