/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  GroupObjective,
  GroupObjectiveFromJSON,
  GroupObjectiveToJSON,
  PersonalObjective,
  PersonalObjectiveFromJSON,
  PersonalObjectiveToJSON,
  RestResponse,
  RestResponseFromJSON,
  RestResponseToJSON,
  RestResponseListGroupObjective,
  RestResponseListGroupObjectiveFromJSON,
  RestResponseListGroupObjectiveToJSON,
  RestResponsePersonalObjective,
  RestResponsePersonalObjectiveFromJSON,
  RestResponsePersonalObjectiveToJSON,
  RestResponseVoid,
  RestResponseVoidFromJSON,
  RestResponseVoidToJSON,
} from '../models';

export interface CreateGroupObjectivesRequest {
  businessUnitUuid: string;
  performanceCycleUuid: string;
  groupObjective: Array<GroupObjective>;
}

export interface CreatePersonalObjectiveRequest {
  personalObjective: PersonalObjective;
}

export interface DeletePersonalObjectiveRequest {
  uuid: string;
}

export interface GetGroupObjectivesRequest {
  businessUnitUuid: string;
  performanceCycleUuid: string;
}

export interface GetPersonalObjectiveRequest {
  uuid: string;
}

export interface UpdateGroupObjectivesRequest {
  businessUnitUuid: string;
  performanceCycleUuid: string;
  groupObjective: Array<GroupObjective>;
}

export interface UpdatePersonalObjectiveRequest {
  uuid: string;
  personalObjective: PersonalObjective;
}

/**
 *
 */
export class ObjectiveApi extends runtime.BaseAPI {
  /**
   * Group\'s objectives created
   * Create new group\'s objectives
   */
  async createGroupObjectivesRaw(
    requestParameters: CreateGroupObjectivesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseListGroupObjective>> {
    if (requestParameters.businessUnitUuid === null || requestParameters.businessUnitUuid === undefined) {
      throw new runtime.RequiredError(
        'businessUnitUuid',
        'Required parameter requestParameters.businessUnitUuid was null or undefined when calling createGroupObjectives.',
      );
    }

    if (requestParameters.performanceCycleUuid === null || requestParameters.performanceCycleUuid === undefined) {
      throw new runtime.RequiredError(
        'performanceCycleUuid',
        'Required parameter requestParameters.performanceCycleUuid was null or undefined when calling createGroupObjectives.',
      );
    }

    if (requestParameters.groupObjective === null || requestParameters.groupObjective === undefined) {
      throw new runtime.RequiredError(
        'groupObjective',
        'Required parameter requestParameters.groupObjective was null or undefined when calling createGroupObjectives.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/business-units/{businessUnitUuid}/performance-cycles/{performanceCycleUuid}/objectives`
          .replace(`{${'businessUnitUuid'}}`, encodeURIComponent(String(requestParameters.businessUnitUuid)))
          .replace(`{${'performanceCycleUuid'}}`, encodeURIComponent(String(requestParameters.performanceCycleUuid))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.groupObjective.map(GroupObjectiveToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseListGroupObjectiveFromJSON(jsonValue));
  }

  /**
   * Group\'s objectives created
   * Create new group\'s objectives
   */
  async createGroupObjectives(
    requestParameters: CreateGroupObjectivesRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseListGroupObjective> {
    const response = await this.createGroupObjectivesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * PersonalObjective created
   * Create a personal objective
   */
  async createPersonalObjectiveRaw(
    requestParameters: CreatePersonalObjectiveRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponsePersonalObjective>> {
    if (requestParameters.personalObjective === null || requestParameters.personalObjective === undefined) {
      throw new runtime.RequiredError(
        'personalObjective',
        'Required parameter requestParameters.personalObjective was null or undefined when calling createPersonalObjective.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/objectives`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PersonalObjectiveToJSON(requestParameters.personalObjective),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponsePersonalObjectiveFromJSON(jsonValue));
  }

  /**
   * PersonalObjective created
   * Create a personal objective
   */
  async createPersonalObjective(
    requestParameters: CreatePersonalObjectiveRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponsePersonalObjective> {
    const response = await this.createPersonalObjectiveRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete existing PersonalObjective
   * Delete existing personal objective
   */
  async deletePersonalObjectiveRaw(
    requestParameters: DeletePersonalObjectiveRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseVoid>> {
    if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter requestParameters.uuid was null or undefined when calling deletePersonalObjective.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/objectives/{uuid}`.replace(`{${'uuid'}}`, encodeURIComponent(String(requestParameters.uuid))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseVoidFromJSON(jsonValue));
  }

  /**
   * Delete existing PersonalObjective
   * Delete existing personal objective
   */
  async deletePersonalObjective(
    requestParameters: DeletePersonalObjectiveRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseVoid> {
    const response = await this.deletePersonalObjectiveRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all group\'s objectives by business unit and performance cycle
   */
  async getGroupObjectivesRaw(
    requestParameters: GetGroupObjectivesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseListGroupObjective>> {
    if (requestParameters.businessUnitUuid === null || requestParameters.businessUnitUuid === undefined) {
      throw new runtime.RequiredError(
        'businessUnitUuid',
        'Required parameter requestParameters.businessUnitUuid was null or undefined when calling getGroupObjectives.',
      );
    }

    if (requestParameters.performanceCycleUuid === null || requestParameters.performanceCycleUuid === undefined) {
      throw new runtime.RequiredError(
        'performanceCycleUuid',
        'Required parameter requestParameters.performanceCycleUuid was null or undefined when calling getGroupObjectives.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/business-units/{businessUnitUuid}/performance-cycles/{performanceCycleUuid}/objectives`
          .replace(`{${'businessUnitUuid'}}`, encodeURIComponent(String(requestParameters.businessUnitUuid)))
          .replace(`{${'performanceCycleUuid'}}`, encodeURIComponent(String(requestParameters.performanceCycleUuid))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseListGroupObjectiveFromJSON(jsonValue));
  }

  /**
   * Get all group\'s objectives by business unit and performance cycle
   */
  async getGroupObjectives(
    requestParameters: GetGroupObjectivesRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseListGroupObjective> {
    const response = await this.getGroupObjectivesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a personal objective by its uuid
   */
  async getPersonalObjectiveRaw(
    requestParameters: GetPersonalObjectiveRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponsePersonalObjective>> {
    if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter requestParameters.uuid was null or undefined when calling getPersonalObjective.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/objectives/{uuid}`.replace(`{${'uuid'}}`, encodeURIComponent(String(requestParameters.uuid))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponsePersonalObjectiveFromJSON(jsonValue));
  }

  /**
   * Get a personal objective by its uuid
   */
  async getPersonalObjective(
    requestParameters: GetPersonalObjectiveRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponsePersonalObjective> {
    const response = await this.getPersonalObjectiveRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Group\'s objectives updated
   * Update group\'s objectives
   */
  async updateGroupObjectivesRaw(
    requestParameters: UpdateGroupObjectivesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponseListGroupObjective>> {
    if (requestParameters.businessUnitUuid === null || requestParameters.businessUnitUuid === undefined) {
      throw new runtime.RequiredError(
        'businessUnitUuid',
        'Required parameter requestParameters.businessUnitUuid was null or undefined when calling updateGroupObjectives.',
      );
    }

    if (requestParameters.performanceCycleUuid === null || requestParameters.performanceCycleUuid === undefined) {
      throw new runtime.RequiredError(
        'performanceCycleUuid',
        'Required parameter requestParameters.performanceCycleUuid was null or undefined when calling updateGroupObjectives.',
      );
    }

    if (requestParameters.groupObjective === null || requestParameters.groupObjective === undefined) {
      throw new runtime.RequiredError(
        'groupObjective',
        'Required parameter requestParameters.groupObjective was null or undefined when calling updateGroupObjectives.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/business-units/{businessUnitUuid}/performance-cycles/{performanceCycleUuid}/objectives`
          .replace(`{${'businessUnitUuid'}}`, encodeURIComponent(String(requestParameters.businessUnitUuid)))
          .replace(`{${'performanceCycleUuid'}}`, encodeURIComponent(String(requestParameters.performanceCycleUuid))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.groupObjective.map(GroupObjectiveToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponseListGroupObjectiveFromJSON(jsonValue));
  }

  /**
   * Group\'s objectives updated
   * Update group\'s objectives
   */
  async updateGroupObjectives(
    requestParameters: UpdateGroupObjectivesRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponseListGroupObjective> {
    const response = await this.updateGroupObjectivesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update existing PersonalObjective
   * Update existing personal objective
   */
  async updatePersonalObjectiveRaw(
    requestParameters: UpdatePersonalObjectiveRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<RestResponsePersonalObjective>> {
    if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter requestParameters.uuid was null or undefined when calling updatePersonalObjective.',
      );
    }

    if (requestParameters.personalObjective === null || requestParameters.personalObjective === undefined) {
      throw new runtime.RequiredError(
        'personalObjective',
        'Required parameter requestParameters.personalObjective was null or undefined when calling updatePersonalObjective.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization-App'] = this.configuration.apiKey('Authorization-App'); // additional-auth-jwt authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer-jwt-identity', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/objectives/{uuid}`.replace(`{${'uuid'}}`, encodeURIComponent(String(requestParameters.uuid))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: PersonalObjectiveToJSON(requestParameters.personalObjective),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RestResponsePersonalObjectiveFromJSON(jsonValue));
  }

  /**
   * Update existing PersonalObjective
   * Update existing personal objective
   */
  async updatePersonalObjective(
    requestParameters: UpdatePersonalObjectiveRequest,
    initOverrides?: RequestInit,
  ): Promise<RestResponsePersonalObjective> {
    const response = await this.updatePersonalObjectiveRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
