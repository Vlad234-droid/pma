/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  ContractType,
  ContractTypeFromJSON,
  ContractTypeFromJSONTyped,
  ContractTypeToJSON,
  Department,
  DepartmentFromJSON,
  DepartmentFromJSONTyped,
  DepartmentToJSON,
  Grade,
  GradeFromJSON,
  GradeFromJSONTyped,
  GradeToJSON,
  Job,
  JobFromJSON,
  JobFromJSONTyped,
  JobToJSON,
  LegalEmployer,
  LegalEmployerFromJSON,
  LegalEmployerFromJSONTyped,
  LegalEmployerToJSON,
  Position,
  PositionFromJSON,
  PositionFromJSONTyped,
  PositionToJSON,
} from './';

/**
 *
 * @export
 * @interface WorkRelationship
 */
export interface WorkRelationship {
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  locationUUID?: string;
  /**
   *
   * @type {ContractType}
   * @memberof WorkRelationship
   */
  contractType?: ContractType;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  colleagueType?: WorkRelationshipColleagueTypeEnum;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  workingStatus?: WorkRelationshipWorkingStatusEnum;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  type?: WorkRelationshipTypeEnum;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  defaultExpenseAccount?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  peopleGroup?: string;
  /**
   *
   * @type {LegalEmployer}
   * @memberof WorkRelationship
   */
  legalEmployer?: LegalEmployer;
  /**
   *
   * @type {Department}
   * @memberof WorkRelationship
   */
  department?: Department;
  /**
   *
   * @type {Grade}
   * @memberof WorkRelationship
   */
  grade?: Grade;
  /**
   *
   * @type {Position}
   * @memberof WorkRelationship
   */
  position?: Position;
  /**
   *
   * @type {Job}
   * @memberof WorkRelationship
   */
  job?: Job;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  managerUUID?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  actionCode?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  actionReasonCode?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  userStatus?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  workSchedule?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  employmentType?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  salaryFrequency?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  workingHours?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  costCenter?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  assignmentId?: string;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  primaryEntity?: string;
  /**
   *
   * @type {boolean}
   * @memberof WorkRelationship
   */
  workingInHiredCountry?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof WorkRelationship
   */
  isManager?: boolean;
  /**
   *
   * @type {string}
   * @memberof WorkRelationship
   */
  workLevel?: WorkRelationshipWorkLevelEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum WorkRelationshipColleagueTypeEnum {
  Employee = 'EMPLOYEE',
  External = 'EXTERNAL',
  Contractor = 'CONTRACTOR',
}
/**
 * @export
 * @enum {string}
 */
export enum WorkRelationshipWorkingStatusEnum {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Suspended = 'SUSPENDED',
  InactivePaid = 'INACTIVE_PAID',
}
/**
 * @export
 * @enum {string}
 */
export enum WorkRelationshipTypeEnum {
  Primary = 'PRIMARY',
}
/**
 * @export
 * @enum {string}
 */
export enum WorkRelationshipWorkLevelEnum {
  Wl1 = 'WL1',
  Wl2 = 'WL2',
  Wl3 = 'WL3',
  Wl4 = 'WL4',
  Wl5 = 'WL5',
}

export function WorkRelationshipFromJSON(json: any): WorkRelationship {
  return WorkRelationshipFromJSONTyped(json, false);
}

export function WorkRelationshipFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkRelationship {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    locationUUID: !exists(json, 'locationUUID') ? undefined : json['locationUUID'],
    contractType: !exists(json, 'contractType') ? undefined : ContractTypeFromJSON(json['contractType']),
    colleagueType: !exists(json, 'colleagueType') ? undefined : json['colleagueType'],
    workingStatus: !exists(json, 'workingStatus') ? undefined : json['workingStatus'],
    type: !exists(json, 'type') ? undefined : json['type'],
    defaultExpenseAccount: !exists(json, 'defaultExpenseAccount') ? undefined : json['defaultExpenseAccount'],
    peopleGroup: !exists(json, 'peopleGroup') ? undefined : json['peopleGroup'],
    legalEmployer: !exists(json, 'legalEmployer') ? undefined : LegalEmployerFromJSON(json['legalEmployer']),
    department: !exists(json, 'department') ? undefined : DepartmentFromJSON(json['department']),
    grade: !exists(json, 'grade') ? undefined : GradeFromJSON(json['grade']),
    position: !exists(json, 'position') ? undefined : PositionFromJSON(json['position']),
    job: !exists(json, 'job') ? undefined : JobFromJSON(json['job']),
    managerUUID: !exists(json, 'managerUUID') ? undefined : json['managerUUID'],
    actionCode: !exists(json, 'actionCode') ? undefined : json['actionCode'],
    actionReasonCode: !exists(json, 'actionReasonCode') ? undefined : json['actionReasonCode'],
    userStatus: !exists(json, 'userStatus') ? undefined : json['userStatus'],
    workSchedule: !exists(json, 'workSchedule') ? undefined : json['workSchedule'],
    employmentType: !exists(json, 'employmentType') ? undefined : json['employmentType'],
    salaryFrequency: !exists(json, 'salaryFrequency') ? undefined : json['salaryFrequency'],
    workingHours: !exists(json, 'workingHours') ? undefined : json['workingHours'],
    costCenter: !exists(json, 'costCenter') ? undefined : json['costCenter'],
    assignmentId: !exists(json, 'assignmentId') ? undefined : json['assignmentId'],
    primaryEntity: !exists(json, 'primaryEntity') ? undefined : json['primaryEntity'],
    workingInHiredCountry: !exists(json, 'workingInHiredCountry') ? undefined : json['workingInHiredCountry'],
    isManager: !exists(json, 'isManager') ? undefined : json['isManager'],
    workLevel: !exists(json, 'workLevel') ? undefined : json['workLevel'],
  };
}

export function WorkRelationshipToJSON(value?: WorkRelationship | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    locationUUID: value.locationUUID,
    contractType: ContractTypeToJSON(value.contractType),
    colleagueType: value.colleagueType,
    workingStatus: value.workingStatus,
    type: value.type,
    defaultExpenseAccount: value.defaultExpenseAccount,
    peopleGroup: value.peopleGroup,
    legalEmployer: LegalEmployerToJSON(value.legalEmployer),
    department: DepartmentToJSON(value.department),
    grade: GradeToJSON(value.grade),
    position: PositionToJSON(value.position),
    job: JobToJSON(value.job),
    managerUUID: value.managerUUID,
    actionCode: value.actionCode,
    actionReasonCode: value.actionReasonCode,
    userStatus: value.userStatus,
    workSchedule: value.workSchedule,
    employmentType: value.employmentType,
    salaryFrequency: value.salaryFrequency,
    workingHours: value.workingHours,
    costCenter: value.costCenter,
    assignmentId: value.assignmentId,
    primaryEntity: value.primaryEntity,
    workingInHiredCountry: value.workingInHiredCountry,
    isManager: value.isManager,
    workLevel: value.workLevel,
  };
}
