/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  Contact,
  ContactFromJSON,
  ContactFromJSONTyped,
  ContactToJSON,
  Effectivity,
  EffectivityFromJSON,
  EffectivityFromJSONTyped,
  EffectivityToJSON,
  ExternalSystems,
  ExternalSystemsFromJSON,
  ExternalSystemsFromJSONTyped,
  ExternalSystemsToJSON,
  Profile,
  ProfileFromJSON,
  ProfileFromJSONTyped,
  ProfileToJSON,
  ServiceDates,
  ServiceDatesFromJSON,
  ServiceDatesFromJSONTyped,
  ServiceDatesToJSON,
  WorkRelationship,
  WorkRelationshipFromJSON,
  WorkRelationshipFromJSONTyped,
  WorkRelationshipToJSON,
} from './';

/**
 *
 * @export
 * @interface Colleague
 */
export interface Colleague {
  /**
   *
   * @type {string}
   * @memberof Colleague
   */
  colleagueUUID?: string;
  /**
   *
   * @type {string}
   * @memberof Colleague
   */
  employeeId?: string;
  /**
   *
   * @type {string}
   * @memberof Colleague
   */
  countryCode?: string;
  /**
   *
   * @type {Effectivity}
   * @memberof Colleague
   */
  effectivity?: Effectivity;
  /**
   *
   * @type {ExternalSystems}
   * @memberof Colleague
   */
  externalSystems?: ExternalSystems;
  /**
   *
   * @type {Profile}
   * @memberof Colleague
   */
  profile?: Profile;
  /**
   *
   * @type {Contact}
   * @memberof Colleague
   */
  contact?: Contact;
  /**
   *
   * @type {ServiceDates}
   * @memberof Colleague
   */
  serviceDates?: ServiceDates;
  /**
   *
   * @type {Array<WorkRelationship>}
   * @memberof Colleague
   */
  workRelationships?: Array<WorkRelationship>;
}

export function ColleagueFromJSON(json: any): Colleague {
  return ColleagueFromJSONTyped(json, false);
}

export function ColleagueFromJSONTyped(json: any, ignoreDiscriminator: boolean): Colleague {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    colleagueUUID: !exists(json, 'colleagueUUID') ? undefined : json['colleagueUUID'],
    employeeId: !exists(json, 'employeeId') ? undefined : json['employeeId'],
    countryCode: !exists(json, 'countryCode') ? undefined : json['countryCode'],
    effectivity: !exists(json, 'effectivity') ? undefined : EffectivityFromJSON(json['effectivity']),
    externalSystems: !exists(json, 'externalSystems') ? undefined : ExternalSystemsFromJSON(json['externalSystems']),
    profile: !exists(json, 'profile') ? undefined : ProfileFromJSON(json['profile']),
    contact: !exists(json, 'contact') ? undefined : ContactFromJSON(json['contact']),
    serviceDates: !exists(json, 'serviceDates') ? undefined : ServiceDatesFromJSON(json['serviceDates']),
    workRelationships: !exists(json, 'workRelationships')
      ? undefined
      : (json['workRelationships'] as Array<any>).map(WorkRelationshipFromJSON),
  };
}

export function ColleagueToJSON(value?: Colleague | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    colleagueUUID: value.colleagueUUID,
    employeeId: value.employeeId,
    countryCode: value.countryCode,
    effectivity: EffectivityToJSON(value.effectivity),
    externalSystems: ExternalSystemsToJSON(value.externalSystems),
    profile: ProfileToJSON(value.profile),
    contact: ContactToJSON(value.contact),
    serviceDates: ServiceDatesToJSON(value.serviceDates),
    workRelationships:
      value.workRelationships === undefined
        ? undefined
        : (value.workRelationships as Array<any>).map(WorkRelationshipToJSON),
  };
}
