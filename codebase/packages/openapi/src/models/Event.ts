/* tslint:disable */
/* eslint-disable */
/**
 * PMA API
 * Documentation PMA API v1.0
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Event
 */
export interface Event {
  /**
   *
   * @type {string}
   * @memberof Event
   */
  eventId?: string;
  /**
   *
   * @type {string}
   * @memberof Event
   */
  eventName?: string;
  /**
   *
   * @type {string}
   * @memberof Event
   */
  eventPriority?: EventEventPriorityEnum;
  /**
   *
   * @type {Date}
   * @memberof Event
   */
  eventCreationDate?: Date;
  /**
   *
   * @type {Event}
   * @memberof Event
   */
  callbackEvent?: Event;
  /**
   *
   * @type {string}
   * @memberof Event
   */
  callbackServiceURL?: string;
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof Event
   */
  eventProperties?: { [key: string]: object };
}

/**
 * @export
 * @enum {string}
 */
export enum EventEventPriorityEnum {
  Highest = 'HIGHEST',
  HighH = 'HIGH_H',
  High = 'HIGH',
  HighL = 'HIGH_L',
  NormalH = 'NORMAL_H',
  Normal = 'NORMAL',
  NormalL = 'NORMAL_L',
  LowH = 'LOW_H',
  Low = 'LOW',
  LowL = 'LOW_L',
  Lowest = 'LOWEST',
}

export function EventFromJSON(json: any): Event {
  return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    eventId: !exists(json, 'eventId') ? undefined : json['eventId'],
    eventName: !exists(json, 'eventName') ? undefined : json['eventName'],
    eventPriority: !exists(json, 'eventPriority') ? undefined : json['eventPriority'],
    eventCreationDate: !exists(json, 'eventCreationDate') ? undefined : new Date(json['eventCreationDate']),
    callbackEvent: !exists(json, 'callbackEvent') ? undefined : EventFromJSON(json['callbackEvent']),
    callbackServiceURL: !exists(json, 'callbackServiceURL') ? undefined : json['callbackServiceURL'],
    eventProperties: !exists(json, 'eventProperties') ? undefined : json['eventProperties'],
  };
}

export function EventToJSON(value?: Event | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    eventId: value.eventId,
    eventName: value.eventName,
    eventPriority: value.eventPriority,
    eventCreationDate: value.eventCreationDate === undefined ? undefined : value.eventCreationDate.toISOString(),
    callbackEvent: EventToJSON(value.callbackEvent),
    callbackServiceURL: value.callbackServiceURL,
    eventProperties: value.eventProperties,
  };
}
